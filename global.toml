# ipcrawler Global Configuration
# Configuration for active DNS reconnaissance plugins

[metadata]
version = "1.0.0"
description = "Global configuration for ipcrawler reconnaissance automation tools"

# ========================================
# CONCURRENCY & PERFORMANCE SETTINGS
# ========================================

[concurrency]
# Total concurrent operations allowed
max_total_scans = 50

# Port scanning pool size  
max_port_scans = 10

# Service scanning pool size (auto-calculated: max_total_scans - max_port_scans)
max_service_scans = 40

# File descriptor requirements
# If you get "too many open files" errors, increase your system limit:
# Linux/macOS: ulimit -n 4096  (temporary)
# Linux permanent: Add "* soft nofile 4096" and "* hard nofile 8192" to /etc/security/limits.conf
# macOS permanent: Add "limit maxfiles 4096 8192" to ~/.zshrc or ~/.bash_profile
min_file_descriptors = 1024
recommended_file_descriptors = 2048

# ========================================
# PORT SCANNER CONFIGURATION
# ========================================
# Two-phase scanning: RustScan finds open ports â†’ Nmap does service detection
# RustScan is REQUIRED for port discovery, Nmap only does service detection
# Uncomment any section below to override default plugin behavior

# [tools.port_scanner]
# enabled = true           # Enable port scanning functionality
# 
# # Port range configuration
# [tools.port_scanner.ports]
# # Select which ports to scan:
# scan_strategy = "top-1000"  # Strategy for port selection
# 
# # Available scan strategies:
# #   "top-100"    = RustScan top 1000 + Nmap top 100 (fastest, ~10 seconds)
# #   "top-1000"   = RustScan top 1000 + Nmap top 1000 (default, ~30 seconds) 
# #   "top-10000"  = RustScan top 1000 + Nmap top 10000 (comprehensive, ~2-5 minutes)
# #   "full"       = Scan all 65535 ports (very slow, ~10+ minutes)
# #   "custom"     = Use the custom_range setting below
# # Note: RustScan only supports top-1000 ports, but Nmap will use the exact count
# 
# # Custom port range (ONLY used when scan_strategy = "custom" above)
# # Examples: "22,80,443,8080" or "1-1000" or "1-1000,8000-9000"
# custom_range = "1-1000"  # Custom ports to scan
# 
# # RustScan configuration - Fast port discovery
# [tools.port_scanner.rustscan]
# command = "rustscan"     # RustScan executable
# base_args = ["--greppable", "--no-config"]  # Output format and disable config file
# timeout_ms = 1500        # Per-port timeout (reduced for faster scans)
# total_timeout_ms = 120000 # Total scan timeout (2 minutes)
# batch_size = 2000        # Ports per batch (reduced for stability)
# ulimit = 3000           # File descriptor limit
# tries = 1               # Retry attempts per port
# 
# # Nmap configuration - Service detection ONLY (not port scanning)
# # Nmap receives comma-separated ports from RustScan and identifies services
# [tools.port_scanner.nmap]
# command = "nmap"         # Nmap executable
# base_args = ["--open"]   # Only show open ports
# total_timeout_ms = 90000  # Total nmap timeout (90 seconds)
# version_intensity = 4    # Service detection intensity (0-9, balanced for speed)
# max_retries = 1         # Retry attempts for failed probes
# host_timeout_sec = 90    # Per-host timeout (90 seconds)
# auto_detect_sudo = true  # Automatically detect sudo privileges for advanced scans
# fallback_to_connect_scan = true # Use TCP connect when sudo unavailable

# ========================================
# DNS RECONNAISSANCE TOOLS
# ========================================
# Uncomment any section below to override default plugin behavior

# [tools.nslookup]
# # Override default command and arguments
# command = "nslookup"
# base_args = []

# # Override DNS query options
# [tools.nslookup.options]
# record_types = ["A", "AAAA", "MX", "NS", "TXT", "PTR"]
# reverse_dns = true              # Enable PTR lookups for IPs
# recursive = true               # Use recursive DNS queries
# delay_between_queries_ms = 500 # Be nice to DNS servers

# # Override timeouts and limits
# [tools.nslookup.limits]
# timeout_ms = 10000             # 10 seconds per query
# max_retries = 2
# total_timeout_ms = 30000       # 30 seconds total per target

# [tools.dig]
# # Override default command and arguments for better output formatting
# command = "dig"
# base_args = ["+short", "+time=3", "+tries=2"]

# # Override DNS query options
# [tools.dig.options]
# record_types = ["A", "AAAA", "MX", "NS", "TXT", "CNAME", "SOA", "PTR"]
# reverse_dns = true              # Enable PTR lookups for IPs
# recursive = true               # Use recursive DNS queries
# delay_between_queries_ms = 250 # Faster than nslookup due to +short output
# include_additional_records = false

# # Override timeouts and limits
# [tools.dig.limits]
# timeout_ms = 10000             # 10 seconds per query
# max_retries = 2
# total_timeout_ms = 30000       # 30 seconds total per target
# query_timeout_ms = 3000        # 3 seconds per individual query (+time=3)

# [tools.hosts_discovery]
# # Enable/disable hosts discovery and automatic /etc/hosts updates
# enabled = true                  # Enable hosts discovery plugin
# target_ip = "127.0.0.1"        # IP to map discovered domains to
# auto_write = true              # Automatically write to /etc/hosts if sudo available
# backup_hosts = true            # Create backup before modifying /etc/hosts

# # dnsx configuration for subdomain enumeration
# [tools.hosts_discovery.dnsx] 
# command = "dnsx"               # Path to dnsx binary
# timeout_ms = 30000             # 30 seconds timeout for dnsx
# max_results = 1000             # Maximum subdomains to discover

# # httpx configuration for virtual host enumeration
# [tools.hosts_discovery.httpx]
# command = "httpx"              # Path to httpx binary  
# timeout_ms = 60000             # 60 seconds timeout for httpx
# max_results = 100              # Maximum vhosts to discover

# ========================================
# GLOBAL OVERRIDES
# ========================================

[overrides]
# Force specific tool versions or paths if needed
[overrides.paths]
nslookup = "/usr/bin/nslookup"   # Override nslookup path if needed
dig = "/usr/bin/dig"             # Override dig path if needed
dnsx = "/usr/local/bin/dnsx"     # Override dnsx path if needed
httpx = "/usr/local/bin/httpx"   # Override httpx path if needed

# Global timeout multipliers
[overrides.timeouts]
multiplier = 1.0                 # Multiply all timeouts by this factor
max_total_runtime_s = 300        # 5 minutes total scan limit

# ========================================
# OUTPUT CONFIGURATION
# ========================================
# Uncomment to override default output settings

# [output]
# # Template selection
# report_formats = ["txt", "md", "json"]
# default_template = "summary"

# # File naming patterns
# [output.naming]
# run_id_pattern = "run_{target}_{timestamp}"
# timestamp_format = "%Y%m%d_%H%M%S"

# # Artifact retention
# [output.retention]
# keep_raw_scans = true
# keep_plugin_results = true
# compress_old_runs = false
# max_run_history = 50

# ========================================
# LOGGING CONFIGURATION
# ========================================
# Uncomment to override default logging settings

# [logging]
# level = "info"                   # trace, debug, info, warn, error
# target = "file"                 # console, file, both
# max_file_size_mb = 10
# rotate_files = true

# ========================================
# VALIDATION RULES
# ========================================
# Uncomment to override default validation settings

# [validation]
# # Pre-flight checks for active tools only
# require_tools = ["nslookup", "dig", "dnsx", "httpx"]
# check_file_descriptors = true
# check_disk_space_mb = 100

# # Input validation  
# [validation.targets]
# allow_private_ips = true
# allow_localhost = true
# max_target_length = 253
# validate_dns = false

# ========================================
# PLUGIN SYSTEM
# ========================================
# Uncomment to override default plugin settings

# [plugins]
# # Plugin discovery and loading
# auto_discover = true
# plugin_dirs = ["./plugins", "./custom_plugins"]

# # Plugin execution order for active reconnaissance plugins
# [plugins.execution_order]
# reconnaissance = ["nslookup", "dig", "hosts_discovery"]
# port_scanners = ["port_scanner"]  # Port scanning with rustscan + nmap
# service_scanners = []            # Empty - no service scanning plugins active
# reporters = ["summary_reporter"]

# ========================================
# PORT SCANNER CONFIGURATION (OPTIONAL)
# Two-phase scanning: RustScan for port discovery + Nmap for service detection
# Only applied if port scanning tools (rustscan + nmap) are available
# ========================================

# [tools.port_scanner]
# enabled = true           # Enable port scanning functionality
#
# # RustScan configuration - Fast port discovery
# [tools.port_scanner.rustscan]
# command = "rustscan"     # RustScan executable (install: cargo install rustscan)
# base_args = ["--greppable"]  # Output format for parsing
# timeout_ms = 3000        # Per-port timeout in milliseconds
# total_timeout_ms = 300000 # Total scan timeout (5 minutes)
# batch_size = 4500        # Ports per batch (balance speed vs accuracy)
# ulimit = 5000           # File descriptor limit (0 = auto-detect)
# tries = 1               # Retry attempts per port
#
# # Nmap configuration - Detailed service detection
# [tools.port_scanner.nmap]
# command = "nmap"         # Nmap executable
# base_args = ["--open"]   # Only show open ports
# total_timeout_ms = 600000 # Total nmap timeout (10 minutes)
# version_intensity = 7    # Service detection intensity (0-9, higher = more thorough)
# max_retries = 2         # Retry attempts for failed probes
# host_timeout_sec = 300   # Per-host timeout (5 minutes)
# auto_detect_sudo = true  # Automatically detect sudo privileges
# fallback_to_connect_scan = true # Use -sT when sudo unavailable