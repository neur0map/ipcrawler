#!/usr/bin/env python3
"""Simple master report generator - just provide the workspace name"""

import sys
from pathlib import Path

# Add parent directory to Python path so we can import from src/
sys.path.insert(0, str(Path(__file__).parent.parent))

from generate_master_report import load_scan_data_from_workspace
from src.core.reporting.manager import ReportManager

def main():
    if len(sys.argv) != 2:
        print("Usage: ./master_report <workspace_name>")
        print()
        print("Examples:")
        print("  ./master_report scan_perc_gg_20250723_213926")
        print("  ./master_report scan_google_com_20250724_143317")
        print()
        print("Available workspaces:")
        workspaces_dir = Path("workspaces")
        if workspaces_dir.exists():
            for workspace in sorted(workspaces_dir.iterdir()):
                if workspace.is_dir() and workspace.name.startswith('scan_'):
                    print(f"  {workspace.name}")
        else:
            print("  No workspaces/ directory found")
        return 1
    
    workspace_name = sys.argv[1]
    workspace_path = Path("workspaces") / workspace_name
    
    if not workspace_path.exists():
        print(f"‚ùå Workspace not found: {workspace_path}")
        return 1
    
    print(f"üîç Processing: {workspace_name}")
    
    try:
        # Load scan data
        scan_data = load_scan_data_from_workspace(workspace_path)
        
        if not scan_data:
            print(f"‚ùå No scan data found in workspace")
            return 1
        
        target = scan_data.get('target', 'unknown')
        print(f"üéØ Target: {target}")
        
        # Save to current directory 
        report_manager = ReportManager(output_dir=Path.cwd())
        
        print(f"üìù Generating master TXT report...")
        
        report_path = report_manager.generate_master_report(
            data=scan_data,
            target=target,
            format_type='txt'
        )
        
        print(f"‚úÖ Master report saved: {report_path.name}")
        
        # Show file stats
        file_size = report_path.stat().st_size
        with open(report_path, 'r') as f:
            line_count = sum(1 for _ in f)
        
        print(f"üìä {line_count} lines, {file_size:,} bytes")
        
    except Exception as e:
        print(f"‚ùå Failed: {e}")
        return 1

if __name__ == "__main__":
    exit(main())