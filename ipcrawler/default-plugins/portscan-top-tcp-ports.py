from ipcrawler.plugins import PortScan
from ipcrawler.config import config
import requests
import asyncio


class QuickTCPPortScan(PortScan):
    def __init__(self):
        super().__init__()
        self.name = "Top TCP Ports"
        self.description = "Performs an Nmap scan of the top 1000 TCP ports."
        self.type = "tcp"
        self.tags = ["default", "default-port-scan", "safe", "quick"]
        self.priority = 0

    def configure(self):
        self.add_true_option(
            "parallel-scan",
            help="Split port scan into parallel halves if normal scan hangs. Default: %(default)s"
        )

    async def run(self, target):
        if target.ports:  # Don't run this plugin if there are custom ports.
            return []

        if config["proxychains"]:
            traceroute_os = ""
        else:
            traceroute_os = " -A --osscan-guess"

        # Add timeout and host timeout to prevent hanging
        timeout_options = " --host-timeout 10m --max-scan-delay 20s"
        
        # Check if parallel scan is enabled
        if self.get_option("parallel-scan"):
            return await self._run_parallel_scan(target, traceroute_os, timeout_options)
        else:
            return await self._run_normal_scan(target, traceroute_os, timeout_options)

    async def _run_normal_scan(self, target, traceroute_os, timeout_options):
        """Run normal single nmap scan"""
        process, stdout, stderr = await target.execute(
            "timeout 1800 nmap {nmap_extra} -sV -sC --version-all"
            + traceroute_os
            + timeout_options
            + ' -oN "{scandir}/_quick_tcp_nmap.txt" -oX "{scandir}/xml/_quick_tcp_nmap.xml" {address}',
            blocking=False,
        )
        services = await target.extract_services(stdout)
        await self._check_winrm_services(services, target)
        await process.wait()
        return services

    async def _run_parallel_scan(self, target, traceroute_os, timeout_options):
        """Run parallel port scans on two halves of the top 1000 ports"""
        target.info("🔄 Running parallel port scan (splitting top 1000 ports into two halves)")
        
        # Top 500 ports (first half)
        first_half_ports = "1,3-4,6-7,9,13,17,19-26,30,32-33,37,42-43,49,53,70,79-85,88-90,99-100,106,109-111,113,119,125,135,139,143-144,146,161,163,179,199,211-212,222,254-256,259,264,280,301,306,311,340,366,389,406-407,416-417,425,427,443-445,458,464-465,481,497,500,512-515,524,541,543-545,548,554-555,563,587,593,616-617,625,631,636,646,648,666-668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,800-801,808,843,873,880,888,898,900-903,911-912,981,987,990,992-993,995,999-1002,1007,1009-1011,1021-1100,1102,1104-1108,1110-1114,1117,1119,1121-1124,1126,1130-1132,1137-1138,1141,1145,1147-1149,1151-1152,1154,1163-1166,1169,1174-1175,1183,1185-1187,1192,1198-1199,1201,1213,1216-1218,1233-1234,1236,1244,1247-1248,1259,1271-1272,1277,1287,1296,1300-1301,1309-1311,1322,1328,1334,1352,1417,1433-1434,1443,1455,1461,1494,1500-1501,1503,1521,1524,1533,1556,1580,1583,1594,1600,1641,1658,1666,1687-1688,1700,1717-1721,1723,1755,1761,1782-1783,1801,1805,1812,1839-1840,1862-1864,1875,1900,1914,1935,1947,1971-1972,1974,1984,1998-2010,2013,2020-2022,2030,2033-2035,2038,2040-2043,2045-2049,2065,2068,2099-2100,2103,2105-2107,2111,2119,2121,2126,2135,2144,2160-2161,2170,2179,2190-2191,2196,2200,2222,2251,2260,2288,2301,2323,2366,2381-2383,2393-2394,2399,2401,2492,2500,2522,2525,2557,2601-2602,2604-2605,2607-2608,2638,2701-2702,2710,2717-2718,2725,2800,2809,2811,2869,2875,2909-2910,2920,2967-2968,2998,3000-3001,3003,3005-3007,3011,3013,3017,3030-3031,3052,3071,3077,3128,3168,3211,3221,3260-3261,3268-3269,3283,3300-3301,3306,3322-3325,3333,3351,3367,3369-3372,3389-3390,3404,3476,3493,3517,3527,3546,3551,3580,3659,3689-3690,3703,3737,3766,3784,3800-3801,3809,3814,3826-3828,3851,3869,3871,3878,3880,3889,3905,3914,3918,3920,3945,3971,3986,3995,3998,4000-4006,4045,4111,4125-4126,4129,4224,4242,4279,4321,4343,4443-4446,4449,4550,4567,4662,4848,4899-4900,4998,5000-5004,5009,5030,5033,5050-5051,5054,5060-5061,5080,5087,5100-5102,5120,5190,5200,5214,5221-5222,5225-5226,5269,5280,5298,5357,5405,5414,5431-5432,5440,5500,5510,5544,5550,5555,5560,5566,5631,5633,5666,5678-5679,5718,5730,5800-5802,5810-5811,5815,5822,5825,5850,5859,5862,5877,5900-5904,5906-5907,5910-5911,5915,5922,5925,5950,5952,5959-5963,5987-5989,5998-6007,6009,6025,6059,6100-6101,6106,6112,6123,6129,6156,6346,6389,6502,6510,6543,6547,6565-6567,6580,6646,6666-6669,6689,6692,6699,6779,6788-6789,6792,6839,6881,6901,6969,7000-7002,7004,7007,7019,7025,7070,7100,7103,7106,7200-7201,7402,7435,7443,7496,7512,7625,7627,7676,7741,7777-7778,7800,7911,7920-7921,7937-7938,7999-8002,8007-8011,8021-8022,8031,8042,8045,8080-8090,8093,8099-8100,8180-8181,8192-8194,8200,8222,8254,8290-8292,8300,8333,8383,8400,8402,8443,8500,8600,8649,8651-8652,8654,8701,8800,8873,8888,8899,8994,9000-9003,9009-9011,9040,9050,9071,9080-9081,9090-9091,9099-9103,9110-9111,9200,9207,9220,9290,9415,9418,9485,9500,9502-9503,9535,9575,9593-9595,9618,9666,9876-9878,9898,9900,9917,9929,9943-9944,9968,9998-10004,10009-10010,10012,10024-10025,10082,10180,10215,10243,10566,10616-10617,10621,10626,10628-10629,10778,11110-11111,11967,12000,12174,12265,12345,13456,13722,13782-13783,14000,14238,14441-14442,15000,15002-15004,15660,15742,16000-16001,16012,16016,16018,16080,16113,16992-16993,17877,17988,18040,18101,18988,19101,19283,19315,19350,19780,19801,19842,20000,20005,20031,20221-20222,20828,21571,22939,23502,24444,24800,25734-25735,26214,27000,27352-27353,27355-27356,27715,28201,30000,30718,30951,31038,31337,32768-32785,33354,33899,34571-34573,35500,38292,40193,40911,41511,42510,44176,44442-44443,44501,45100,48080,49152-49161,49163,49165,49167,49175-49176,49400,49999-50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055-55056,55555,55600,56737-56738,57294,57797,58080,60020,60443,61532,61900,62078,63331,64623,64680,65000,65129,65389"
        
        # Top 500 ports (second half) 
        second_half_ports = "1-2,5,8,10-12,14-16,18,20,27-29,31,34-36,38-41,44-48,50-52,54-69,71-78,86-87,91-98,101-105,107-108,112,114-118,120-124,126-134,136-138,140-142,145,147-160,162,164-178,180-198,200-210,213-221,223-253,257-258,260-263,265-279,281-300,302-305,307-310,312-339,341-365,367-388,390-405,408-415,418-424,426,428-442,446-457,459-463,466-480,482-496,498-499,501-511,516-523,525-540,542,546-547,549-553,556-562,564-586,588-592,594-615,618-624,626-630,632-635,637-645,647,649-665,669-682,684-686,688-690,692-699,701-704,706-710,712-713,715-719,721,723-725,727-748,750-764,766-776,778-782,784-786,788-799,802-807,809-842,844-872,874-879,881-887,889-897,899,904-910,913-980,982-986,988-989,991,994,996-998,1003-1006,1008,1012-1020,1101,1103,1109,1115-1116,1118,1120,1125,1127-1129,1133-1136,1139-1140,1142-1144,1146,1150,1153,1155-1162,1167-1168,1170-1173,1176-1182,1184,1188-1191,1193-1197,1200,1202-1212,1214-1215,1219-1232,1235,1237-1243,1245-1246,1249-1258,1260-1270,1273-1276,1278-1286,1288-1295,1297-1299,1302-1308,1312-1321,1323-1327,1329-1333,1335-1351,1353-1416,1418-1432,1435-1442,1444-1454,1456-1460,1462-1493,1495-1499,1502,1504-1520,1522-1523,1525-1532,1534-1555,1557-1579,1581-1582,1584-1593,1595-1599,1601-1640,1642-1657,1659-1665,1667-1686,1689-1699,1701-1716,1722,1724-1754,1756-1760,1762-1781,1784-1800,1802-1804,1806-1811,1813-1838,1841-1861,1865-1874,1876-1899,1901-1913,1915-1934,1936-1946,1948-1970,1973,1975-1983,1985-1997,2011-2012,2014-2019,2023-2029,2031-2032,2036-2037,2039,2044,2050-2064,2066-2067,2069-2098,2101-2102,2104,2108-2110,2112-2118,2120,2122-2125,2127-2134,2136-2143,2145-2159,2162-2169,2171-2178,2180-2189,2192-2195,2197-2199,2201-2221,2223-2250,2252-2259,2261-2287,2289-2300,2302-2322,2324-2365,2367-2380,2384-2392,2395-2398,2400,2402-2491,2493-2499,2501-2521,2523-2524,2526-2556,2558-2600,2603,2606,2609-2637,2639-2700,2703-2709,2711-2716,2719-2724,2726-2799,2801-2808,2810,2812-2868,2870-2874,2876-2908,2911-2919,2921-2966,2969-2997,2999,3002,3004,3008-3010,3012,3014-3016,3018-3029,3032-3051,3053-3070,3072-3076,3078-3127,3129-3167,3169-3210,3212-3220,3222-3259,3262-3267,3270-3282,3284-3299,3302-3305,3307-3321,3326-3332,3334-3350,3352-3366,3368,3373-3388,3391-3403,3405-3475,3477-3492,3494-3516,3518-3526,3528-3545,3547-3550,3552-3579,3581-3658,3660-3688,3691-3702,3704-3736,3738-3765,3767-3783,3785-3799,3802-3808,3810-3813,3815-3825,3829-3850,3852-3868,3870,3872-3877,3879,3881-3888,3890-3904,3906-3913,3915-3917,3919,3921-3944,3946-3970,3972-3985,3987-3994,3996-3997,3999,4007-4044,4046-4110,4112-4124,4127-4128,4130-4223,4225-4241,4243-4278,4280-4320,4322-4342,4344-4442,4447-4448,4450-4549,4551-4566,4568-4661,4663-4847,4849-4898,4901-4997,4999,5005-5008,5010-5029,5031-5032,5034-5049,5052-5053,5055-5059,5062-5079,5081-5086,5088-5099,5103-5119,5121-5189,5191-5199,5201-5213,5215-5220,5223-5224,5227-5268,5270-5279,5281-5297,5299-5356,5358-5404,5406-5413,5415-5430,5433-5439,5441-5499,5501-5509,5511-5543,5545-5549,5551-5554,5556-5559,5561-5565,5567-5630,5632,5634-5665,5667-5677,5680-5717,5719-5729,5731-5799,5803-5809,5812-5814,5816-5821,5823-5824,5826-5849,5851-5858,5860-5861,5863-5876,5878-5899,5905,5908-5909,5912-5914,5916-5921,5923-5924,5926-5949,5951,5953-5958,5964-5986,5990-5997,6008,6010-6024,6026-6058,6060-6099,6102-6105,6107-6111,6113-6122,6124-6128,6130-6155,6157-6345,6347-6388,6390-6501,6503-6509,6511-6542,6544-6546,6548-6564,6568-6579,6581-6645,6647-6665,6670-6688,6690-6691,6693-6698,6700-6778,6780-6787,6790-6791,6793-6838,6840-6880,6882-6900,6902-6968,6970-6999,7003,7005-7006,7008-7018,7020-7024,7026-7069,7071-7099,7101-7102,7104-7105,7107-7199,7202-7401,7403-7434,7436-7442,7444-7495,7497-7511,7513-7624,7626,7628-7675,7677-7740,7742-7776,7779-7799,7801-7910,7912-7919,7922-7936,7939-7998,8003-8006,8012-8020,8023-8030,8032-8041,8043-8044,8046-8079,8091-8092,8094-8098,8101-8179,8182-8191,8195-8199,8201-8221,8223-8253,8255-8289,8293-8299,8301-8332,8334-8382,8384-8399,8401,8403-8442,8444-8499,8501-8599,8601-8648,8650,8653,8655-8700,8702-8799,8801-8872,8874-8887,8889-8898,8900-8993,8995-8999,9004-9008,9012-9039,9041-9049,9051-9070,9072-9079,9082-9089,9092-9098,9104-9109,9112-9199,9201-9206,9208-9219,9221-9289,9291-9414,9416-9417,9419-9484,9486-9499,9501,9504-9534,9536-9574,9576-9592,9596-9617,9619-9665,9667-9875,9879-9897,9899,9901-9916,9918-9928,9930-9942,9945-9967,9969-9997,10005-10008,10011,10013-10023,10026-10081,10083-10179,10181-10214,10216-10242,10244-10565,10567-10615,10618-10620,10622-10625,10627,10630-10777,10779-11109,11112-11966,11968-11999,12001-12173,12175-12264,12266-12344,12346-13455,13457-13721,13723-13781,13784-13999,14001-14237,14239-14440,14443-14999,15001,15005-15659,15661-15741,15743-15999,16002-16011,16013-16015,16017,16019-16079,16081-16112,16114-16991,16994-17876,17878-17987,17989-18039,18041-18100,18102-18987,18989-19100,19102-19282,19284-19314,19316-19349,19351-19779,19781-19800,19802-19841,19843-19999,20001-20004,20006-20030,20032-20220,20223-20827,20829-21570,21572-22938,22940-23501,23503-24443,24445-24799,24801-25733,25736-26213,26215-26999,27001-27351,27354,27357-27714,27716-28200,28202-29999,30001-30717,30719-30950,30952-31037,31039-31336,31338-32767,32786-33353,33355-33898,33900-34570,34574-35499,35501-38291,38293-40192,40194-40910,40912-41510,41512-42509,42511-44175,44177-44441,44444-44500,44502-45099,45101-48079,48081-49151,49162,49164,49166,49168-49174,49177-49399,49401-49998,50004-50005,50007-50299,50301-50388,50390-50499,50501-50635,50637-50799,50801-51102,51104-51492,51494-52672,52674-52821,52823-52847,52849-52868,52870-54044,54046-54327,54329-55054,55057-55554,55556-55599,55601-56736,56739-57293,57295-57796,57798-58079,58081-60019,60021-60442,60444-61531,61533-61899,61901-62077,62079-63330,63332-64622,64624-64679,64681-64999,65001-65128,65130-65388,65390-65535"
        
        # Run both scans in parallel
        tasks = [
            self._run_port_range_scan(target, traceroute_os, timeout_options, first_half_ports, "first_half"),
            self._run_port_range_scan(target, traceroute_os, timeout_options, second_half_ports, "second_half")
        ]
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # Combine services from both scans
        all_services = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                target.error(f"Port scan {'first' if i == 0 else 'second'} half failed: {result}")
            else:
                all_services.extend(result)
        
        await self._check_winrm_services(all_services, target)
        return all_services

    async def _run_port_range_scan(self, target, traceroute_os, timeout_options, port_range, scan_name):
        """Run nmap scan on specific port range"""
        target.info(f"🔍 Starting {scan_name} port scan...")
        
        process, stdout, stderr = await target.execute(
            f"timeout 900 nmap {{nmap_extra}} -sV -sC --version-all"
            + traceroute_os
            + timeout_options
            + f' -p {port_range}'
            + f' -oN "{{scandir}}/_quick_tcp_nmap_{scan_name}.txt" -oX "{{scandir}}/xml/_quick_tcp_nmap_{scan_name}.xml" {{address}}',
            blocking=False,
        )
        services = await target.extract_services(stdout)
        await process.wait()
        target.info(f"✅ Completed {scan_name} port scan - found {len(services)} services")
        return services

    async def _check_winrm_services(self, services, target):
        """Check if HTTP services are actually WinRM"""
        for service in services:
            if service.name == "http" and service.port in [5985, 5986]:
                try:
                    wsman = requests.get(
                        ("https" if service.secure else "http") + "://" + target.address + ":" + str(service.port) + "/wsman",
                        verify=False,
                        timeout=10,
                    )
                    if wsman.status_code == 405:
                        service.name = "wsman"
                        wsman = requests.post(
                            ("https" if service.secure else "http") + "://" + target.address + ":" + str(service.port) + "/wsman",
                            verify=False,
                            timeout=10,
                        )
                    else:
                        if wsman.status_code == 401:
                            service.name = "wsman"
                except requests.exceptions.RequestException:
                    # If WinRM check fails, just continue with http service
                    pass
