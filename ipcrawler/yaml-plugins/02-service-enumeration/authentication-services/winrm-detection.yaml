metadata:
  name: "WinRM Detection"
  description: "Windows Remote Management (WinRM) service detection and enumeration"
  type: "servicescan"
  priority: 5
  version: "1.0"
  author: "IPCrawler YAML Plugin System"
  tags: ["default", "safe", "winrm"]

conditions:
  services:
    include: ["^wsman"]
  ports:
    include: [5985, 5986]

options:
  - name: "create_detection_file"
    type: "boolean"
    default: true
    help: "Create WinRM detection file with service information"

execution:
  commands:
    - name: "winrm_detection_file"
      command: "echo 'WinRM was possibly detected running on {protocol} port {port}.\nCheck _manual_commands.txt for manual commands you can run against this service.' > \"{scandir}/{protocol}_{port}_winrm-detection.txt\""
      timeout: 10
      output_file: "{protocol}_{port}_winrm-detection.txt"
      conditions:
        - variable: "create_detection_file"
          operator: "equals"
          value: true

  manual_commands:
    - description: "(crackmapexec) WinRM bruteforce with wordlists"
      command: "crackmapexec winrm {address} -d '{domain}' -u '{username_wordlist}' -p '{password_wordlist}'"
      conditions:
        - variable: "domain"
          operator: "not_empty"
        - variable: "username_wordlist"
          operator: "not_empty"
        - variable: "password_wordlist"
          operator: "not_empty"
    
    - description: "(crackmapexec) WinRM login test with credentials"
      command: "crackmapexec winrm {address} -d '{domain}' -u '<username>' -p '<password>'"
      conditions:
        - variable: "domain"
          operator: "not_empty"
    
    - description: "(crackmapexec) WinRM login test without domain"
      command: "crackmapexec winrm {address} -u '<username>' -p '<password>'"
    
    - description: "(evil-winrm) Connect with password"
      command: "evil-winrm -u '<user>' -p '<password>' -i {address}"
    
    - description: "(evil-winrm) Connect with hash"
      command: "evil-winrm -u '<user>' -H '<hash>' -i {address}"
    
    - description: "(evil-winrm) Connect with SSL"
      command: "evil-winrm -u '<user>' -p '<password>' -i {address} -S"
      conditions:
        - variable: "port"
          operator: "equals"
          value: "5986"
    
    - description: "(winrm-brute) Python WinRM brute force"
      command: "winrm-brute -t {address} -U {username_wordlist} -P {password_wordlist}"
      conditions:
        - variable: "username_wordlist"
          operator: "not_empty"
        - variable: "password_wordlist"
          operator: "not_empty"
    
    - description: "(nmap) WinRM service enumeration"
      command: "nmap -T5 -sV -p {port} --script=\"winrm-*\" {address}"
    
    - description: "(powershell) Test WinRM connection"
      command: "Test-WSMan -ComputerName {address} -Port {port}"
    
    - description: "(winrs) Windows Remote Shell"
      command: "winrs -r:http://{address}:{port} -u:<username> -p:<password> cmd"
      conditions:
        - variable: "port"
          operator: "equals"
          value: "5985"
    
    - description: "(winrs) Windows Remote Shell over HTTPS"
      command: "winrs -r:https://{address}:{port} -u:<username> -p:<password> cmd"
      conditions:
        - variable: "port"
          operator: "equals"
          value: "5986"

output:
  patterns:
    # WinRM Service Detection
    - pattern: "(?i)winrm.*detected"
      description: "WinRM service detected"
      severity: "medium"
      category: "detection"
    
    - pattern: "(?i)wsman.*service"
      description: "WS-Management service detected"
      severity: "medium"
      category: "detection"
    
    - pattern: "(?i)windows.*remote.*management"
      description: "Windows Remote Management detected"
      severity: "medium"
      category: "detection"
    
    # Authentication Success/Failure
    - pattern: "(?i)authentication.*successful"
      description: "WinRM authentication successful"
      severity: "high"
      category: "authentication"
    
    - pattern: "(?i)login.*successful"
      description: "WinRM login successful"
      severity: "high"
      category: "authentication"
    
    - pattern: "(?i)access.*granted"
      description: "WinRM access granted"
      severity: "high"
      category: "authentication"
    
    - pattern: "(?i)authentication.*failed"
      description: "WinRM authentication failed"
      severity: "info"
      category: "authentication"
    
    - pattern: "(?i)invalid.*credentials"
      description: "WinRM invalid credentials"
      severity: "info"
      category: "authentication"
    
    - pattern: "(?i)access.*denied"
      description: "WinRM access denied"
      severity: "info"
      category: "authentication"
    
    # Security Configuration
    - pattern: "(?i)ssl.*enabled"
      description: "WinRM SSL/TLS encryption enabled"
      severity: "info"
      category: "security"
    
    - pattern: "(?i)https.*enabled"
      description: "WinRM HTTPS enabled"
      severity: "info"
      category: "security"
    
    - pattern: "(?i)unencrypted.*traffic"
      description: "WARNING: WinRM unencrypted traffic detected"
      severity: "medium"
      category: "security"
    
    - pattern: "(?i)basic.*authentication.*enabled"
      description: "WARNING: WinRM basic authentication enabled"
      severity: "medium"
      category: "security"
    
    - pattern: "(?i)negotiate.*authentication"
      description: "WinRM Negotiate authentication enabled"
      severity: "info"
      category: "authentication"
    
    - pattern: "(?i)kerberos.*authentication"
      description: "WinRM Kerberos authentication enabled"
      severity: "info"
      category: "authentication"
    
    - pattern: "(?i)certificate.*authentication"
      description: "WinRM certificate authentication enabled"
      severity: "info"
      category: "authentication"
    
    # Service Information
    - pattern: "(?i)winrm.*version[:\\s]*([^\\n\\r]+)"
      description: "WinRM Version: {match1}"
      severity: "info"
      category: "version"
    
    - pattern: "(?i)powershell.*version[:\\s]*([^\\n\\r]+)"
      description: "PowerShell Version: {match1}"
      severity: "info"
      category: "version"
    
    - pattern: "(?i)ws.*management.*version[:\\s]*([^\\n\\r]+)"
      description: "WS-Management Version: {match1}"
      severity: "info"
      category: "version"
    
    # Port and Protocol Information
    - pattern: "(?i)winrm.*port.*5985"
      description: "WinRM HTTP port 5985 detected"
      severity: "info"
      category: "ports"
    
    - pattern: "(?i)winrm.*port.*5986"
      description: "WinRM HTTPS port 5986 detected"
      severity: "info"
      category: "ports"
    
    # Domain and Computer Information
    - pattern: "(?i)computer.*name[:\\s]*([^\\n\\r]+)"
      description: "Computer Name: {match1}"
      severity: "info"
      category: "system"
    
    - pattern: "(?i)domain.*name[:\\s]*([^\\n\\r]+)"
      description: "Domain Name: {match1}"
      severity: "info"
      category: "domain"
    
    - pattern: "(?i)workgroup[:\\s]*([^\\n\\r]+)"
      description: "Workgroup: {match1}"
      severity: "info"
      category: "domain"
    
    # Operating System Information
    - pattern: "(?i)windows.*server.*([\\d]+)"
      description: "Windows Server {match1} detected"
      severity: "info"
      category: "os"
    
    - pattern: "(?i)windows.*([\\d]+)"
      description: "Windows {match1} detected"
      severity: "info"
      category: "os"
    
    # Error Messages
    - pattern: "(?i)service.*unavailable"
      description: "WinRM service unavailable"
      severity: "low"
      category: "availability"
    
    - pattern: "(?i)connection.*refused"
      description: "WinRM connection refused"
      severity: "low"
      category: "connectivity"
    
    - pattern: "(?i)timeout.*exceeded"
      description: "WinRM connection timeout"
      severity: "low"
      category: "connectivity"
    
    - pattern: "(?i)host.*unreachable"
      description: "WinRM host unreachable"
      severity: "low"
      category: "connectivity"
    
    # Remote Shell Information
    - pattern: "(?i)remote.*shell.*established"
      description: "WinRM remote shell established"
      severity: "high"
      category: "access"
    
    - pattern: "(?i)command.*execution.*successful"
      description: "WinRM command execution successful"
      severity: "high"
      category: "access"
    
    # User Information
    - pattern: "(?i)user.*context[:\\s]*([^\\n\\r]+)"
      description: "User Context: {match1}"
      severity: "medium"
      category: "users"
    
    - pattern: "(?i)privileges[:\\s]*([^\\n\\r]+)"
      description: "User Privileges: {match1}"
      severity: "medium"
      category: "privileges"
    
    # Configuration Information
    - pattern: "(?i)max.*connections[:\\s]*([^\\n\\r]+)"
      description: "Max Connections: {match1}"
      severity: "info"
      category: "configuration"
    
    - pattern: "(?i)max.*shells[:\\s]*([^\\n\\r]+)"
      description: "Max Shells: {match1}"
      severity: "info"
      category: "configuration"
    
    - pattern: "(?i)idle.*timeout[:\\s]*([^\\n\\r]+)"
      description: "Idle Timeout: {match1}"
      severity: "info"
      category: "configuration"

  technology_detection:
    - pattern: "(?i)windows.*remote.*management"
      technology: "Windows Remote Management"
    
    - pattern: "(?i)powershell.*([\\d\\.]+)"
      technology: "PowerShell"
      version_group: 1
    
    - pattern: "(?i)ws.*management.*([\\d\\.]+)"
      technology: "WS-Management"
      version_group: 1
    
    - pattern: "(?i)windows.*server.*([\\d]+)"
      technology: "Windows Server"
      version_group: 1

requirements:
  tools:
    - name: "echo"
      check_command: "echo --version"
      install_hint: "Built-in command"

  variables:
    - name: "domain"
      description: "Target domain for WinRM authentication"
      required: false
      source: "global"
    
    - name: "username_wordlist"
      description: "Username wordlist for brute force attacks"
      required: false
      source: "global"
    
    - name: "password_wordlist"
      description: "Password wordlist for brute force attacks"
      required: false
      source: "global"

debug:
  log_level: "info"
  trace_decisions: false
  show_command_output: false