# .github/workflows/discord-notify.yml
name: Discord Commit Notifications

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    types: [opened, closed]

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Fetch last 2 commits to compare changes

    - name: Wait for MegaLinter completion
      run: sleep 30  # Wait for MegaLinter to start

    - name: Get MegaLinter status
      id: megalinter_status
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        timeout=300  # 5 minutes timeout
        elapsed=0
        interval=10
        
        echo "Checking MegaLinter status for commit ${{ github.sha }}"
        
        while [ $elapsed -lt $timeout ]; do
          # Check workflow runs for MegaLinter
          status=$(gh api "repos/${{ github.repository }}/actions/runs" \
            --jq '.workflow_runs[] | select(.name == "MegaLinter" and (.head_sha == "${{ github.sha }}" or .head_commit.id == "${{ github.sha }}")) | .conclusion' \
            | head -1)
          
          echo "Current status: '$status' (elapsed: ${elapsed}s)"
          
          if [[ "$status" == "success" ]]; then
            echo "linter_summary=‚úÖ Code quality: All checks passed" >> $GITHUB_OUTPUT
            echo "linter_emoji=‚úÖ" >> $GITHUB_OUTPUT
            echo "linter_color=65280" >> $GITHUB_OUTPUT  # Green
            break
          elif [[ "$status" == "failure" ]]; then
            echo "linter_summary=‚ùå Code quality: Issues detected" >> $GITHUB_OUTPUT
            echo "linter_emoji=‚ùå" >> $GITHUB_OUTPUT
            echo "linter_color=16711680" >> $GITHUB_OUTPUT  # Red
            break
          elif [[ "$status" == "cancelled" ]]; then
            echo "linter_summary=‚ö†Ô∏è Code quality: Analysis cancelled" >> $GITHUB_OUTPUT
            echo "linter_emoji=‚ö†Ô∏è" >> $GITHUB_OUTPUT
            echo "linter_color=16776960" >> $GITHUB_OUTPUT  # Yellow
            break
          fi
          
          sleep $interval
          elapsed=$((elapsed + interval))
        done
        
        # If timeout reached or no status found, set default status
        if [ $elapsed -ge $timeout ] || [[ -z "$status" || "$status" == "null" ]]; then
          echo "linter_summary=‚è≥ Code quality: Analysis pending" >> $GITHUB_OUTPUT
          echo "linter_emoji=‚è≥" >> $GITHUB_OUTPUT
          echo "linter_color=8421504" >> $GITHUB_OUTPUT  # Gray
        fi

    - name: Get commit information
      id: commit-info
      run: |
        # Get commit details
        COMMIT_SHA="${{ github.sha }}"
        COMMIT_MESSAGE=$(git log --format=%B -n 1 $COMMIT_SHA | head -1)
        COMMIT_AUTHOR=$(git log --format='%an' -n 1 $COMMIT_SHA)
        COMMIT_AUTHOR_EMAIL=$(git log --format='%ae' -n 1 $COMMIT_SHA)
        COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
        BRANCH_NAME="${{ github.ref_name }}"
        
        # Get file changes
        ADDED_FILES=$(git diff --name-only --diff-filter=A HEAD~1 HEAD | head -10)
        MODIFIED_FILES=$(git diff --name-only --diff-filter=M HEAD~1 HEAD | head -10)
        DELETED_FILES=$(git diff --name-only --diff-filter=D HEAD~1 HEAD | head -10)
        
        # Count changes
        ADDED_COUNT=$(git diff --name-only --diff-filter=A HEAD~1 HEAD | wc -l)
        MODIFIED_COUNT=$(git diff --name-only --diff-filter=M HEAD~1 HEAD | wc -l)
        DELETED_COUNT=$(git diff --name-only --diff-filter=D HEAD~1 HEAD | wc -l)
        
        # Set outputs
        echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        echo "commit_author_email=$COMMIT_AUTHOR_EMAIL" >> $GITHUB_OUTPUT
        echo "commit_url=$COMMIT_URL" >> $GITHUB_OUTPUT
        echo "commit_sha_short=${COMMIT_SHA:0:7}" >> $GITHUB_OUTPUT
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "added_count=$ADDED_COUNT" >> $GITHUB_OUTPUT
        echo "modified_count=$MODIFIED_COUNT" >> $GITHUB_OUTPUT
        echo "deleted_count=$DELETED_COUNT" >> $GITHUB_OUTPUT
        
        # Prepare file lists for Discord (truncate if too long)
        echo "added_files<<EOF" >> $GITHUB_OUTPUT
        echo "$ADDED_FILES" | head -5 >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "modified_files<<EOF" >> $GITHUB_OUTPUT
        echo "$MODIFIED_FILES" | head -5 >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "deleted_files<<EOF" >> $GITHUB_OUTPUT
        echo "$DELETED_FILES" | head -5 >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Send Discord notification
      run: |
        # Escape special characters for JSON while preserving list format
        escape_json() {
          echo "$1" | sed 's/\\/\\\\/g; s/"/\\"/g; s/\t/\\t/g'
        }
        
        # Format file list for Discord with bullet points  
        format_file_list() {
          echo "$1" | sed 's/^/‚Ä¢ /'
        }
        
        # Prepare file change summary with recon theme
        CHANGES_SUMMARY=""
        if [ "${{ steps.commit-info.outputs.added_count }}" -gt 0 ]; then
          CHANGES_SUMMARY="$CHANGES_SUMMARY\nüéØ **New Targets Acquired (${{ steps.commit-info.outputs.added_count }} files):**"
          if [ ! -z "${{ steps.commit-info.outputs.added_files }}" ]; then
            ADDED_FILES_FORMATTED=$(format_file_list "${{ steps.commit-info.outputs.added_files }}")
            CHANGES_SUMMARY="$CHANGES_SUMMARY\n\`\`\`\n$ADDED_FILES_FORMATTED\n\`\`\`"
          fi
        fi
        
        if [ "${{ steps.commit-info.outputs.modified_count }}" -gt 0 ]; then
          CHANGES_SUMMARY="$CHANGES_SUMMARY\nüîß **Systems Updated (${{ steps.commit-info.outputs.modified_count }} files):**"
          if [ ! -z "${{ steps.commit-info.outputs.modified_files }}" ]; then
            MODIFIED_FILES_FORMATTED=$(format_file_list "${{ steps.commit-info.outputs.modified_files }}")
            CHANGES_SUMMARY="$CHANGES_SUMMARY\n\`\`\`\n$MODIFIED_FILES_FORMATTED\n\`\`\`"
          fi
        fi
        
        if [ "${{ steps.commit-info.outputs.deleted_count }}" -gt 0 ]; then
          CHANGES_SUMMARY="$CHANGES_SUMMARY\nüí• **Targets Eliminated (${{ steps.commit-info.outputs.deleted_count }} files):**"
          if [ ! -z "${{ steps.commit-info.outputs.deleted_files }}" ]; then
            DELETED_FILES_FORMATTED=$(format_file_list "${{ steps.commit-info.outputs.deleted_files }}")
            CHANGES_SUMMARY="$CHANGES_SUMMARY\n\`\`\`\n$DELETED_FILES_FORMATTED\n\`\`\`"
          fi
        fi
        
        # Escape commit message and other fields
        COMMIT_MESSAGE_ESCAPED=$(escape_json "${{ steps.commit-info.outputs.commit_message }}")
        COMMIT_AUTHOR_ESCAPED=$(escape_json "${{ steps.commit-info.outputs.commit_author }}")
        LINTER_SUMMARY_ESCAPED=$(escape_json "${{ steps.megalinter_status.outputs.linter_summary }}")
        
        # Prepare Discord embed payload using jq for proper JSON formatting
        DISCORD_PAYLOAD=$(jq -n \
          --arg username "ipcrawler-bot" \
          --arg avatar_url "https://cdn-icons-png.flaticon.com/512/2091/2091665.png" \
          --arg title "üïµÔ∏è Intelligence Report: New Commit Deployed" \
          --arg description "**Target acquired:** \`$COMMIT_MESSAGE_ESCAPED\`" \
          --arg url "${{ steps.commit-info.outputs.commit_url }}" \
          --argjson color "${{ steps.megalinter_status.outputs.linter_color }}" \
          --arg operator_value "\`$COMMIT_AUTHOR_ESCAPED\`" \
          --arg branch_value "\`${{ steps.commit-info.outputs.branch_name }}\`" \
          --arg scan_value "**[+] ${{ steps.commit-info.outputs.added_count }}** **[~] ${{ steps.commit-info.outputs.modified_count }}** **[-] ${{ steps.commit-info.outputs.deleted_count }}**" \
          --arg recon_value "$CHANGES_SUMMARY" \
          --arg quality_value "$LINTER_SUMMARY_ESCAPED" \
          --arg footer_text "Commit ${{ steps.commit-info.outputs.commit_sha_short }} ‚Ä¢ ${{ github.repository }}" \
          --arg footer_icon "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" \
          --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          '{
            "username": $username,
            "avatar_url": $avatar_url,
            "embeds": [
              {
                "title": $title,
                "description": $description,
                "url": $url,
                "color": $color,
                "fields": [
                  {
                    "name": "üéØ Operator",
                    "value": $operator_value,
                    "inline": true
                  },
                  {
                    "name": "üåê Network Branch", 
                    "value": $branch_value,
                    "inline": true
                  },
                  {
                    "name": "üì° Scan Results",
                    "value": $scan_value,
                    "inline": true
                  },
                  {
                    "name": "üîç Reconnaissance Data",
                    "value": $recon_value,
                    "inline": false
                  },
                  {
                    "name": "‚ö° Code Quality Analysis", 
                    "value": $quality_value,
                    "inline": false
                  }
                ],
                "footer": {
                  "text": $footer_text,
                  "icon_url": $footer_icon
                },
                "timestamp": $timestamp
              }
            ]
          }')
        
        # Send to Discord webhook with error handling
        echo "Sending Discord notification..."
        response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -d "$DISCORD_PAYLOAD" \
          "${{ secrets.DISCORD_WEBHOOK_URL }}")
        
        http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
        echo "Discord API Response Code: $http_code"
        
        if [ "$http_code" != "204" ] && [ "$http_code" != "200" ]; then
          echo "Discord webhook failed with code: $http_code"
          echo "Response: $response"
          exit 1
        else
          echo "Discord notification sent successfully!"
        fi

  notify-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Send PR notification
      run: |
        # Determine PR action color and emoji
        if [ "${{ github.event.action }}" = "opened" ]; then
          COLOR=3066993
          EMOJI="üîÄ"
          ACTION="opened"
        elif [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
          COLOR=5814783
          EMOJI="‚úÖ"
          ACTION="merged"
        elif [ "${{ github.event.action }}" = "closed" ]; then
          COLOR=15158332
          EMOJI="‚ùå"
          ACTION="closed"
        else
          COLOR=16776960
          EMOJI="üîÑ"
          ACTION="${{ github.event.action }}"
        fi
        
        DISCORD_PAYLOAD=$(cat << EOF
        {
          "username": "ipcrawler-bot",
          "avatar_url": "https://cdn-icons-png.flaticon.com/512/2091/2091665.png",
          "embeds": [
            {
              "title": "$EMOJI Mission Status: Pull Request $ACTION",
              "description": "**Operation:** \`${{ github.event.pull_request.title }}\`",
              "url": "${{ github.event.pull_request.html_url }}",
              "color": $COLOR,
              "fields": [
                {
                  "name": "üéØ Agent",
                  "value": "\`${{ github.event.pull_request.user.login }}\`",
                  "inline": true
                },
                {
                  "name": "üåê Network Path",
                  "value": "\`${{ github.event.pull_request.head.ref }}\` ‚Üí \`${{ github.event.pull_request.base.ref }}\`",
                  "inline": true
                },
                {
                  "name": "üì° Payload Size",
                  "value": "**[+] ${{ github.event.pull_request.additions }}** **[-] ${{ github.event.pull_request.deletions }}**",
                  "inline": true
                }
              ],
              "footer": {
                "text": "ipcrawler reconnaissance framework ‚Ä¢ ${{ github.repository }}",
                "icon_url": "https://raw.githubusercontent.com/microsoft/vscode-icons/main/icons/file_type_python.svg"
              },
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            }
          ]
        }
        EOF
        )
        
        curl -X POST \
          -H "Content-Type: application/json" \
          -d "$DISCORD_PAYLOAD" \
          "${{ secrets.DISCORD_WEBHOOK_URL }}"