# .github/workflows/discord-notify.yml
name: Discord Notifications

on:
  push:
    branches: ["main"]
  workflow_run:
    workflows: ["MegaLinter"]
    types:
      - completed

# least-privilege token
permissions:
  contents: read

# cancel older runs when a new push arrives on the same ref
concurrency:
  group: notify-${{ github.ref }}
  cancel-in-progress: true

env:
  # tweak this without touching the workflow:
  IMPORTANT_REGEX: '(feat|feature|perf|refactor|BREAKING CHANGE|chore\\(release\\)|release[: ]|\\bv?\\d+\\.\\d+\\.\\d+)'
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for MegaLinter completion
        if: github.event_name == 'push'
        run: sleep 30  # Wait for MegaLinter to start

      - name: Get MegaLinter status
        if: github.event_name == 'push'
        id: megalinter_status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          timeout=300  # 5 minutes timeout
          elapsed=0
          interval=10
          
          echo "Checking MegaLinter status for commit ${{ github.sha }}"
          
          while [ $elapsed -lt $timeout ]; do
            # Check workflow runs for MegaLinter
            status=$(gh api "repos/${{ github.repository }}/actions/runs" \
              --jq '.workflow_runs[] | select(.name == "MegaLinter" and (.head_sha == "${{ github.sha }}" or .head_commit.id == "${{ github.sha }}")) | .conclusion' \
              | head -1)
            
            echo "Current status: '$status' (elapsed: ${elapsed}s)"
            
            if [[ "$status" == "success" ]]; then
              echo "linter_summary=‚úÖ Code quality: All checks passed" >> $GITHUB_OUTPUT
              echo "linter_emoji=‚úÖ" >> $GITHUB_OUTPUT
              echo "linter_color=65280" >> $GITHUB_OUTPUT  # Green
              break
            elif [[ "$status" == "failure" ]]; then
              echo "linter_summary=‚ùå Code quality: Issues detected" >> $GITHUB_OUTPUT
              echo "linter_emoji=‚ùå" >> $GITHUB_OUTPUT
              echo "linter_color=16711680" >> $GITHUB_OUTPUT  # Red
              break
            elif [[ "$status" == "cancelled" ]]; then
              echo "linter_summary=‚ö†Ô∏è Code quality: Analysis cancelled" >> $GITHUB_OUTPUT
              echo "linter_emoji=‚ö†Ô∏è" >> $GITHUB_OUTPUT
              echo "linter_color=16776960" >> $GITHUB_OUTPUT  # Yellow
              break
            fi
            
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          # If timeout reached, set default status
          if [ $elapsed -ge $timeout ]; then
            echo "linter_summary=‚è±Ô∏è Code quality: Analysis timed out" >> $GITHUB_OUTPUT
            echo "linter_emoji=‚è±Ô∏è" >> $GITHUB_OUTPUT
            echo "linter_color=8421504" >> $GITHUB_OUTPUT  # Gray
          fi

      - name: Send Discord Intelligence Report
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Define important commit regex
          IMPORTANT_REGEX="(feat|fix|security|breaking|major|critical|urgent|release|version|v[0-9])"
          
          # Extract commit information from GitHub event
          commit_msg="${{ github.event.head_commit.message }}"
          commit_author="${{ github.event.head_commit.author.name }}"
          commit_sha="${{ github.sha }}"
          commit_url="${{ github.event.head_commit.url }}"
          
          # Fallback for author if empty
          if [[ -z "$commit_author" || "$commit_author" == "null" ]]; then
            commit_author="${{ github.event.pusher.name }}"
          fi
          if [[ -z "$commit_author" || "$commit_author" == "null" ]]; then
            commit_author="${{ github.actor }}"
          fi
          if [[ -z "$commit_author" || "$commit_author" == "null" ]]; then
            commit_author="Unknown Operator"
          fi
          
          # Get first line of commit message (limit to 100 chars)
          commit_title=$(echo "$commit_msg" | head -n1 | cut -c1-100)
          short_sha=$(echo "$commit_sha" | cut -c1-7)
          
          # Extract modified files from the push event
          files_added=$(echo '${{ toJson(github.event.head_commit.added) }}' | jq -r '.[]?' | head -3)
          files_modified=$(echo '${{ toJson(github.event.head_commit.modified) }}' | jq -r '.[]?' | head -3)
          files_removed=$(echo '${{ toJson(github.event.head_commit.removed) }}' | jq -r '.[]?' | head -3)
          
          # Combine and format files for display
          all_files=""
          [[ -n "$files_added" ]] && all_files="$all_files$files_added"
          [[ -n "$files_modified" ]] && all_files="$all_files$'\n'$files_modified"
          [[ -n "$files_removed" ]] && all_files="$all_files$'\n'$files_removed"
          
          # Format files as comma-separated basenames, limit to 3
          if [[ -n "$all_files" ]]; then
            scan_results=$(echo "$all_files" | grep -v '^$' | head -3 | xargs -I {} basename {} | paste -sd ", " -)
            file_count=$(echo "$all_files" | grep -v '^$' | wc -l)
            if [[ $file_count -gt 3 ]]; then
              scan_results="$scan_results (+$((file_count-3)) more)"
            fi
          else
            scan_results="No files detected"
          fi
          
          # Only send notification for important commits
          if echo "$commit_title" | grep -qiE "$IMPORTANT_REGEX"; then
            echo "üì° Important commit detected: $commit_title"
            
            # Prepare Discord webhook payload
            payload=$(jq -nc \
              --arg title "$commit_title" \
              --arg author "$commit_author" \
              --arg branch "${{ github.ref_name }}" \
              --arg sha "$short_sha" \
              --arg files "$scan_results" \
              --arg url "$commit_url" \
              --arg repo "${{ github.repository }}" \
              --arg linter_status "${{ steps.megalinter_status.outputs.linter_summary }}" \
              --arg linter_emoji "${{ steps.megalinter_status.outputs.linter_emoji }}" \
              --argjson linter_color "${{ steps.megalinter_status.outputs.linter_color }}" '
              {
                username: "ipcrawler-bot",
                embeds: [{
                  title: "üì° Intelligence Report: New Commit Deployed",
                  description: "**Target acquired:** `\($title)`",
                  url: $url,
                  color: $linter_color,
                  fields: [
                    {name: "üö© Operator", value: "`\($author)`", inline: true},
                    {name: "üåê Network Branch", value: "`\($branch)`", inline: true},
                    {name: "üîç Scan Results", value: $files, inline: false},
                    {name: "‚ö° Code Quality Analysis", value: $linter_status, inline: false}
                  ],
                  footer: {
                    text: "Commit \($sha) ‚Ä¢ \($repo)",
                    icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                  },
                  timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                }]
              }')
            
            echo "Sending Intelligence Report to Discord..."
            curl -H "Content-Type: application/json" \
                 -d "$payload" \
                 "${{ secrets.DISCORD_WEBHOOK_URL }}"
            
            echo "‚úÖ Intelligence Report transmitted successfully"
          else
            echo "‚ÑπÔ∏è  Routine commit detected: $commit_title (no notification sent)"
          fi

  notify-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Send PR notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        shell: bash
        run: |
          set -euo pipefail
          action="${{ github.event.action }}"
          merged="${{ github.event.pull_request.merged }}"

          if   [[ "$action" == "opened" ]]; then color=3066993; emoji="üîÄ"; tag="opened"
          elif [[ "$action" == "closed" && "$merged" == "true" ]]; then color=5814783; emoji="‚úÖ"; tag="merged"
          elif [[ "$action" == "closed" ]]; then color=15158332; emoji="‚ùå"; tag="closed"
          else color=16776960; emoji="üîÑ"; tag="$action"; fi

          payload=$(jq -nc \
            --arg title "$emoji Mission Status: Pull Request $tag" \
            --arg op "${{ github.event.pull_request.title }}" \
            --arg url "${{ github.event.pull_request.html_url }}" \
            --arg user "${{ github.event.pull_request.user.login }}" \
            --arg head "${{ github.event.pull_request.head.ref }}" \
            --arg base "${{ github.event.pull_request.base.ref }}" \
            --arg adds "${{ github.event.pull_request.additions }}" \
            --arg dels "${{ github.event.pull_request.deletions }}" \
            --argjson color "$color" '
            {username:"ipcrawler-bot",
             embeds:[{
               title:$title,
               description:"**Operation:** `\($op)`",
               url:$url,
               color:$color,
                                fields:[
                   {name:"üéØ Agent",        value:"`\($user)`", inline:true},
                   {name:"üåê Network Path", value:"`\($head)` ‚Üí `\($base)`", inline:true},
                   {name:"üì° Payload Size", value:"**[+] \($adds)** **[-] \($dels)**", inline:true}
                 ],
               timestamp:(now|strftime("%Y-%m-%dT%H:%M:%SZ"))
             }]}')
          curl -s -o /dev/null -H 'Content-Type: application/json' -d "$payload" "$DISCORD_WEBHOOK"