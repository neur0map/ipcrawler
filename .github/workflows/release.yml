name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
          - os: macos-14
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-14
            target: aarch64-apple-darwin
            name: macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-registry-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-build-

    - name: Install cross-compilation dependencies (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build release binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --release --target ${{ matrix.target }}

    - name: Get release version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create release directory
      run: mkdir -p release

    - name: Package release
      run: |
        cp target/${{ matrix.target }}/release/ipcrawler release/
        cp global.toml release/
        cp README.md release/
        cd release
        
        # Strip binary for smaller size (Linux/macOS)
        if [[ "${{ runner.os }}" != "Windows" ]]; then
          strip ipcrawler || true
        fi
        
        # Create archive
        tar -czf ../ipcrawler-${{ steps.get_version.outputs.VERSION }}-${{ matrix.name }}.tar.gz *

    - name: Generate checksums
      run: |
        sha256sum ipcrawler-${{ steps.get_version.outputs.VERSION }}-${{ matrix.name }}.tar.gz > ipcrawler-${{ steps.get_version.outputs.VERSION }}-${{ matrix.name }}.tar.gz.sha256

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ipcrawler-${{ steps.get_version.outputs.VERSION }}-${{ matrix.name }}
        path: |
          ipcrawler-${{ steps.get_version.outputs.VERSION }}-${{ matrix.name }}.tar.gz
          ipcrawler-${{ steps.get_version.outputs.VERSION }}-${{ matrix.name }}.tar.gz.sha256

  create-release:
    name: Create GitHub Release
    needs: release
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get release version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
        find artifacts -name "*.sha256" -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git tag --sort=-version:refname | grep -v "${{ steps.get_version.outputs.VERSION }}" | head -n1)
        
        if [ -z "$PREV_TAG" ]; then
          # If no previous tag, get all commits
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
        else
          # Get commits since previous tag
          CHANGELOG=$(git log ${PREV_TAG}..${{ steps.get_version.outputs.VERSION }} --pretty=format:"- %s" --no-merges)
        fi
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: IPCrawler ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Changes

          ${{ steps.changelog.outputs.CHANGELOG }}

          ## Downloads

          Choose the appropriate binary for your platform:
          
          - **Linux x86_64**: `ipcrawler-${{ steps.get_version.outputs.VERSION }}-linux-x86_64.tar.gz`
          - **Linux ARM64**: `ipcrawler-${{ steps.get_version.outputs.VERSION }}-linux-aarch64.tar.gz`
          - **macOS Intel**: `ipcrawler-${{ steps.get_version.outputs.VERSION }}-macos-x86_64.tar.gz`
          - **macOS Apple Silicon**: `ipcrawler-${{ steps.get_version.outputs.VERSION }}-macos-aarch64.tar.gz`

          ## Installation

          ```bash
          # Extract the archive
          tar -xzf ipcrawler-${{ steps.get_version.outputs.VERSION }}-[platform].tar.gz
          
          # Make executable and move to PATH
          chmod +x ipcrawler
          sudo mv ipcrawler /usr/local/bin/
          
          # Install configuration
          mkdir -p ~/.config/ipcrawler
          mv global.toml ~/.config/ipcrawler/
          
          # Test installation
          ipcrawler --version
          ```

          ## Verification

          Verify the integrity of downloads using SHA256 checksums:
          ```bash
          sha256sum -c ipcrawler-${{ steps.get_version.outputs.VERSION }}-[platform].tar.gz.sha256
          ```

          üï∑Ô∏è Built with [Claude Code](https://claude.ai/code)
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}