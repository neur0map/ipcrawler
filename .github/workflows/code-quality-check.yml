name: üîç Code Quality Check

"on":
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort bandit safety pyflakes
        pip install toml-sort yamllint sentry-sdk
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..HEAD)
          else
            CHANGED_FILES=$(git ls-files)
          fi
        else
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
        fi
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Check Python syntax errors (Critical)
      id: syntax-check
      run: |
        echo "=== CRITICAL SYNTAX CHECK ==="
        EXIT_CODE=0
        SYNTAX_ERRORS=""
        
        # Check plugins first (priority)
        echo "Checking plugins for critical syntax errors..."
        for file in ipcrawler/default-plugins/**/*.py; do
          if [ -f "$file" ]; then
            echo "Checking: $file"
            if ! python -m py_compile "$file" 2>/tmp/syntax_error; then
              EXIT_CODE=1
              ERROR_MSG=$(cat /tmp/syntax_error)
              SYNTAX_ERRORS="${SYNTAX_ERRORS}‚ùå $file: $ERROR_MSG\n"
              echo "SYNTAX ERROR in $file: $ERROR_MSG"
            fi
          fi
        done
        
        # Check main codebase
        echo "Checking main codebase for critical syntax errors..."
        for file in ipcrawler/*.py *.py; do
          if [ -f "$file" ]; then
            echo "Checking: $file"
            if ! python -m py_compile "$file" 2>/tmp/syntax_error; then
              EXIT_CODE=1
              ERROR_MSG=$(cat /tmp/syntax_error)
              SYNTAX_ERRORS="${SYNTAX_ERRORS}‚ùå $file: $ERROR_MSG\n"
              echo "SYNTAX ERROR in $file: $ERROR_MSG"
            fi
          fi
        done
        
        echo "syntax_errors<<EOF" >> $GITHUB_OUTPUT
        echo -e "$SYNTAX_ERRORS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "syntax_exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        
        if [ $EXIT_CODE -ne 0 ]; then
          echo "‚ùå CRITICAL: Syntax errors found!"
          exit $EXIT_CODE
        else
          echo "‚úÖ No syntax errors found"
        fi

    - name: Check template variable formatting and control flow
      id: template-check
      run: |
        echo "=== TEMPLATE VARIABLE & CONTROL FLOW CHECK ==="
        EXIT_CODE=0
        TEMPLATE_ERRORS=""
        
        # Check for common template variable issues in plugins
        echo "Checking for template variable formatting issues..."
        
        # Look for potential {variable} instead of {{variable}} issues
        SINGLE_BRACE_ISSUES=$(grep -rn "f'.*{[a-zA-Z_][a-zA-Z0-9_]*}.*'" ipcrawler/default-plugins/ || true)
        if [ -n "$SINGLE_BRACE_ISSUES" ]; then
          echo "Potential single brace template issues found:"
          echo "$SINGLE_BRACE_ISSUES"
          TEMPLATE_ERRORS="${TEMPLATE_ERRORS}‚ö†Ô∏è Potential single brace template issues:\n$SINGLE_BRACE_ISSUES\n\n"
        fi
        
        # Look for undefined variables in f-strings that should be template variables
        UNDEFINED_VAR_PATTERN="F821 undefined name '[a-zA-Z_][a-zA-Z0-9_]*'"
        FLAKE8_OUTPUT=$(flake8 ipcrawler/default-plugins/ --select=F821 2>/dev/null || true)
        if echo "$FLAKE8_OUTPUT" | grep -q "$UNDEFINED_VAR_PATTERN"; then
          UNDEFINED_VARS=$(echo "$FLAKE8_OUTPUT" | grep "$UNDEFINED_VAR_PATTERN")
          echo "Undefined variable issues found:"
          echo "$UNDEFINED_VARS"
          TEMPLATE_ERRORS="${TEMPLATE_ERRORS}‚ùå Undefined variables (likely template variable issues):\n$UNDEFINED_VARS\n\n"
          EXIT_CODE=1
        fi
        
        # Check for control flow and structural issues using AST compilation
        echo "Checking for control flow and structural issues..."
        CONTROL_FLOW_ISSUES=""
        
        for file in $(find ipcrawler/ -name "*.py" -type f); do
          if [ -f "$file" ]; then
            # Check if file can be parsed as valid Python AST
            if ! python3 -c "import ast; ast.parse(open('$file', 'r', encoding='utf-8', errors='ignore').read())" 2>/tmp/ast_error_$file; then
              AST_ERROR=$(cat /tmp/ast_error_$file | head -3)
              CONTROL_FLOW_ISSUES="${CONTROL_FLOW_ISSUES}$file: $AST_ERROR\n"
              EXIT_CODE=1
              echo "AST parsing failed for $file"
            fi
          fi
        done
        
        if [ -n "$CONTROL_FLOW_ISSUES" ]; then
          echo "Control flow/AST issues found:"
          echo -e "$CONTROL_FLOW_ISSUES"
          TEMPLATE_ERRORS="${TEMPLATE_ERRORS}‚ùå Control Flow/AST Issues:\n$CONTROL_FLOW_ISSUES\n\n"
        else
          echo "‚úÖ No control flow issues found"
        fi
        
        # Check for indentation inconsistencies (mixed tabs/spaces)
        echo "Checking for indentation issues..."
        INDENT_ISSUES=$(python3 -m tabnanny ipcrawler/ 2>&1 | grep -v "^$" || true)
        if [ -n "$INDENT_ISSUES" ]; then
          echo "Indentation issues found:"
          echo "$INDENT_ISSUES"
          TEMPLATE_ERRORS="${TEMPLATE_ERRORS}‚ö†Ô∏è Indentation Issues:\n$INDENT_ISSUES\n\n"
        fi
        
        echo "template_errors<<EOF" >> $GITHUB_OUTPUT
        echo -e "$TEMPLATE_ERRORS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "template_exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        
        if [ $EXIT_CODE -ne 0 ]; then
          echo "‚ùå Template variable or control flow issues found!"
        else
          echo "‚úÖ No template variable or control flow issues found"
        fi

    - name: Advanced Python linting (Plugins First)
      id: python-lint
      run: |
        echo "=== PYTHON LINTING ==="
        LINT_WARNINGS=""
        LINT_ERRORS=""
        
        # Flake8 check (focus on real errors, ignore style)
        echo "Running flake8 (plugins first)..."
        FLAKE8_OUTPUT=""
        
        # Check plugins first with comprehensive error codes
        if flake8 ipcrawler/default-plugins/ --count --statistics --select=E9,F63,F7,F82,E113,E117,E902,F404,F405 --exclude=__pycache__ > /tmp/flake8_plugins.txt 2>&1; then
          echo "‚úÖ Flake8 plugins: No critical errors"
        else
          FLAKE8_PLUGINS=$(cat /tmp/flake8_plugins.txt)
          LINT_ERRORS="${LINT_ERRORS}‚ùå Flake8 Plugins Critical Errors:\n$FLAKE8_PLUGINS\n\n"
          echo "‚ùå Flake8 plugins found critical errors"
        fi
        
        # Check main codebase with comprehensive error codes
        if flake8 ipcrawler/ *.py --count --statistics --select=E9,F63,F7,F82,E113,E117,E902,F404,F405 --exclude=__pycache__,default-plugins > /tmp/flake8_main.txt 2>&1; then
          echo "‚úÖ Flake8 main: No critical errors"
        else
          FLAKE8_MAIN=$(cat /tmp/flake8_main.txt)
          LINT_ERRORS="${LINT_ERRORS}‚ùå Flake8 Main Critical Errors:\n$FLAKE8_MAIN\n\n"
          echo "‚ùå Flake8 main found critical errors"
        fi
        
        # Additional structural checks with pyflakes
        echo "Running pyflakes for additional structural validation..."
        PYFLAKES_OUTPUT=$(python3 -m pyflakes ipcrawler/ 2>&1 | grep -E "(undefined|redefined|imported but unused|'break' outside loop|'continue' outside loop)" || true)
        if [ -n "$PYFLAKES_OUTPUT" ]; then
          echo "Pyflakes structural issues found:"
          echo "$PYFLAKES_OUTPUT"
          LINT_ERRORS="${LINT_ERRORS}‚ùå Structural Issues (Pyflakes):\n$PYFLAKES_OUTPUT\n\n"
        else
          echo "‚úÖ Pyflakes: No structural issues"
        fi
        
        # Check for common anti-patterns in async code
        echo "Checking for async/await anti-patterns..."
        ASYNC_ISSUES=""
        for file in $(find ipcrawler/ -name "*.py" -type f); do
          # Check for missing await on async calls
          MISSING_AWAIT=$(grep -n "service\.execute(" "$file" | grep -v "await" || true)
          if [ -n "$MISSING_AWAIT" ]; then
            ASYNC_ISSUES="${ASYNC_ISSUES}$file: Missing 'await' before service.execute():\n$MISSING_AWAIT\n\n"
          fi
          
          # Check for blocking calls in async functions
          BLOCKING_CALLS=$(grep -n -A5 -B5 "async def" "$file" | grep -E "(time\.sleep|requests\.|urllib\.)" || true)
          if [ -n "$BLOCKING_CALLS" ]; then
            ASYNC_ISSUES="${ASYNC_ISSUES}$file: Potential blocking calls in async function:\n$BLOCKING_CALLS\n\n"
          fi
        done
        
        if [ -n "$ASYNC_ISSUES" ]; then
          echo "Async/await anti-patterns found:"
          echo -e "$ASYNC_ISSUES"
          LINT_WARNINGS="${LINT_WARNINGS}‚ö†Ô∏è Async/Await Issues:\n$ASYNC_ISSUES\n\n"
        fi
        
        # Security check with bandit (only report high severity)
        echo "Running bandit security check..."
        if bandit -r ipcrawler/ -f txt -o /tmp/bandit.txt -ll >/dev/null 2>&1; then
          echo "‚úÖ Bandit: No high-severity security issues"
        else
          if [ -f /tmp/bandit.txt ] && [ -s /tmp/bandit.txt ]; then
            BANDIT_OUTPUT=$(cat /tmp/bandit.txt)
            LINT_WARNINGS="${LINT_WARNINGS}‚ö†Ô∏è Security Issues (Bandit):\n$BANDIT_OUTPUT\n\n"
            echo "‚ö†Ô∏è Bandit found potential security issues"
          fi
        fi
        
        echo "lint_errors<<EOF" >> $GITHUB_OUTPUT
        echo -e "$LINT_ERRORS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "lint_warnings<<EOF" >> $GITHUB_OUTPUT
        echo -e "$LINT_WARNINGS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: TOML and Makefile validation
      id: config-check
      run: |
        echo "=== CONFIG FILE VALIDATION ==="
        CONFIG_ERRORS=""
        
        # Check TOML files
        echo "Validating TOML files..."
        for toml_file in $(find . -name "*.toml" -not -path "./.git/*"); do
          echo "Checking: $toml_file"
          if ! python -c "import toml; toml.load('$toml_file')" 2>/tmp/toml_error; then
            TOML_ERROR=$(cat /tmp/toml_error)
            CONFIG_ERRORS="${CONFIG_ERRORS}‚ùå TOML Error in $toml_file: $TOML_ERROR\n"
            echo "‚ùå TOML error in $toml_file"
          else
            echo "‚úÖ $toml_file is valid"
          fi
        done
        
        # Check Makefile syntax
        echo "Validating Makefile..."
        if [ -f "Makefile" ]; then
          if ! make -n -f Makefile >/dev/null 2>/tmp/make_error; then
            MAKE_ERROR=$(cat /tmp/make_error)
            CONFIG_ERRORS="${CONFIG_ERRORS}‚ö†Ô∏è Makefile Warning: $MAKE_ERROR\n"
            echo "‚ö†Ô∏è Makefile has potential issues"
          else
            echo "‚úÖ Makefile syntax is valid"
          fi
        fi
        
        echo "config_errors<<EOF" >> $GITHUB_OUTPUT
        echo -e "$CONFIG_ERRORS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Package vulnerability check
      id: safety-check
      run: |
        echo "=== PACKAGE VULNERABILITY CHECK ==="
        SAFETY_WARNINGS=""
        
        if [ -f "requirements.txt" ]; then
          echo "Checking for known vulnerabilities in packages..."
          if ! safety check -r requirements.txt --output text > /tmp/safety.txt 2>&1; then
            SAFETY_OUTPUT=$(cat /tmp/safety.txt)
            SAFETY_WARNINGS="${SAFETY_WARNINGS}‚ö†Ô∏è Package Vulnerabilities:\n$SAFETY_OUTPUT\n"
            echo "‚ö†Ô∏è Vulnerable packages found"
          else
            echo "‚úÖ No known vulnerabilities in packages"
          fi
        fi
        
        echo "safety_warnings<<EOF" >> $GITHUB_OUTPUT
        echo -e "$SAFETY_WARNINGS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Determine overall status
      id: status
      run: |
        OVERALL_STATUS="success"
        STATUS_EMOJI="‚úÖ"
        
        # Check if we have critical errors
        if [ "${{ steps.syntax-check.outputs.syntax_exit_code }}" != "0" ] || 
           [ "${{ steps.template-check.outputs.template_exit_code }}" != "0" ] ||
           [ -n "${{ steps.python-lint.outputs.lint_errors }}" ] ||
           [ -n "${{ steps.config-check.outputs.config_errors }}" ]; then
          OVERALL_STATUS="failure"
          STATUS_EMOJI="‚ùå"
        elif [ -n "${{ steps.python-lint.outputs.lint_warnings }}" ] ||
             [ -n "${{ steps.safety-check.outputs.safety_warnings }}" ]; then
          OVERALL_STATUS="warning"
          STATUS_EMOJI="‚ö†Ô∏è"
        fi
        
        echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
        echo "status_emoji=$STATUS_EMOJI" >> $GITHUB_OUTPUT

    - name: Send Sentry report
      if: always()
      env:
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      run: |
        if [ -z "$SENTRY_DSN" ]; then
          echo "‚ö†Ô∏è SENTRY_DSN not set, skipping Sentry reporting"
        else
          echo "üì° Sending errors to Sentry..."
          
          # Collect all errors and metadata
          OVERALL_STATUS="${{ steps.status.outputs.overall_status }}"
          COMMIT_SHA="${{ github.sha }}"
          BRANCH="${{ github.ref_name }}"
          AUTHOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
          
          # Create Sentry report script
          cat > /tmp/sentry_report.py << 'EOF'
import sentry_sdk
import os
import sys
from datetime import datetime

# Initialize Sentry
sentry_dsn = os.environ.get('SENTRY_DSN')
if not sentry_dsn:
    print("No Sentry DSN provided")
    sys.exit(0)

sentry_sdk.init(
    dsn=sentry_dsn,
    traces_sample_rate=1.0,
)

# Set context
sentry_sdk.set_tag("workflow", "code-quality-check")
sentry_sdk.set_tag("repository", os.environ.get('REPO', 'unknown'))
sentry_sdk.set_tag("branch", os.environ.get('BRANCH', 'unknown'))
sentry_sdk.set_tag("commit", os.environ.get('COMMIT_SHA', 'unknown')[:8])
sentry_sdk.set_tag("author", os.environ.get('AUTHOR', 'unknown'))
sentry_sdk.set_tag("status", os.environ.get('OVERALL_STATUS', 'unknown'))

# Add user context
sentry_sdk.set_user({
    "username": os.environ.get('AUTHOR', 'unknown'),
    "id": os.environ.get('AUTHOR', 'unknown')
})

# Report based on status
status = os.environ.get('OVERALL_STATUS', 'unknown')
if status == 'failure':
    # Collect error details
    syntax_errors = os.environ.get('SYNTAX_ERRORS', '')
    template_errors = os.environ.get('TEMPLATE_ERRORS', '')
    lint_errors = os.environ.get('LINT_ERRORS', '')
    config_errors = os.environ.get('CONFIG_ERRORS', '')
    
    error_details = []
    if syntax_errors: error_details.append(f"Syntax: {syntax_errors[:200]}")
    if template_errors: error_details.append(f"Template: {template_errors[:200]}")
    if lint_errors: error_details.append(f"Lint: {lint_errors[:200]}")
    if config_errors: error_details.append(f"Config: {config_errors[:200]}")
    
    # Send error to Sentry
    sentry_sdk.set_context("errors", {
        "syntax_errors": syntax_errors[:500] if syntax_errors else None,
        "template_errors": template_errors[:500] if template_errors else None,
        "lint_errors": lint_errors[:500] if lint_errors else None,
        "config_errors": config_errors[:500] if config_errors else None,
        "total_error_types": len([e for e in [syntax_errors, template_errors, lint_errors, config_errors] if e])
    })
    
    error_message = f"Code quality check failed: {'; '.join(error_details[:3])}"
    sentry_sdk.capture_message(error_message, level="error")
    print(f"üì° Sent error to Sentry: {error_message}")
    
elif status == 'warning':
    # Report warnings
    lint_warnings = os.environ.get('LINT_WARNINGS', '')
    safety_warnings = os.environ.get('SAFETY_WARNINGS', '')
    
    warning_details = []
    if lint_warnings: warning_details.append(f"Lint: {lint_warnings[:200]}")
    if safety_warnings: warning_details.append(f"Security: {safety_warnings[:200]}")
    
    sentry_sdk.set_context("warnings", {
        "lint_warnings": lint_warnings[:500] if lint_warnings else None,
        "safety_warnings": safety_warnings[:500] if safety_warnings else None,
        "total_warning_types": len([w for w in [lint_warnings, safety_warnings] if w])
    })
    
    warning_message = f"Code quality warnings: {'; '.join(warning_details[:2])}"
    sentry_sdk.capture_message(warning_message, level="warning")
    print(f"üì° Sent warning to Sentry: {warning_message}")
    
else:
    # Success - just track the event
    sentry_sdk.set_context("success", {
        "message": "All code quality checks passed",
        "timestamp": datetime.now().isoformat()
    })
    sentry_sdk.capture_message("Code quality check passed", level="info")
    print("üì° Sent success event to Sentry")

print("‚úÖ Sentry reporting complete")
EOF

          # Execute Sentry report with error data
          SYNTAX_ERRORS="${{ steps.syntax-check.outputs.syntax_errors }}" \
          TEMPLATE_ERRORS="${{ steps.template-check.outputs.template_errors }}" \
          LINT_ERRORS="${{ steps.python-lint.outputs.lint_errors }}" \
          CONFIG_ERRORS="${{ steps.config-check.outputs.config_errors }}" \
          LINT_WARNINGS="${{ steps.python-lint.outputs.lint_warnings }}" \
          SAFETY_WARNINGS="${{ steps.safety-check.outputs.safety_warnings }}" \
          OVERALL_STATUS="$OVERALL_STATUS" \
          COMMIT_SHA="$COMMIT_SHA" \
          BRANCH="$BRANCH" \
          AUTHOR="$AUTHOR" \
          REPO="$REPO" \
          python3 /tmp/sentry_report.py
        fi

    - name: Send Discord notification
      if: always()
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -z "$DISCORD_WEBHOOK_URL" ]; then
          echo "‚ö†Ô∏è DISCORD_WEBHOOK_URL not set, skipping notification"
          exit 0
        fi
        
        # Prepare changed files list with better formatting
        CHANGED_FILES="${{ steps.changed-files.outputs.changed_files }}"
        FILES_COUNT=0
        FILES_LIST=""
        
        if [ -n "$CHANGED_FILES" ]; then
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              FILES_COUNT=$(expr $FILES_COUNT + 1)
              # Add file type emojis
              case "$file" in
                *.py) FILE_EMOJI="üêç" ;;
                *.toml) FILE_EMOJI="‚öôÔ∏è" ;;
                *.yml|*.yaml) FILE_EMOJI="üìã" ;;
                *.md) FILE_EMOJI="üìñ" ;;
                Makefile) FILE_EMOJI="üî®" ;;
                *) FILE_EMOJI="üìÑ" ;;
              esac
              FILES_LIST="${FILES_LIST}${FILE_EMOJI} \`$file\`\n"
            fi
          done <<< "$CHANGED_FILES"
        fi
        
        if [ $FILES_COUNT -eq 0 ]; then
          FILES_LIST="üì≠ No files changed"
        elif [ $FILES_COUNT -gt 10 ]; then
          FILES_LIST="üìÅ **$FILES_COUNT files modified** (showing first 10):\n$FILES_LIST"
        fi
        
        # Build status message with enhanced formatting
        STATUS_EMOJI="${{ steps.status.outputs.status_emoji }}"
        OVERALL_STATUS="${{ steps.status.outputs.overall_status }}"
        
        # Enhanced color scheme
        case "$OVERALL_STATUS" in
          "success") COLOR=5763719 ;; # Modern green #57D13B
          "warning") COLOR=15844367 ;; # Modern yellow #F1C40F  
          "failure") COLOR=15158332 ;; # Modern red #E74C3C
          *) COLOR=9807270 ;; # Modern gray #95A5A6
        esac
        
        # Determine title based on status
        case "$OVERALL_STATUS" in
          "success") TITLE="‚ú® Code Quality: All Checks Passed" ;;
          "warning") TITLE="‚ö†Ô∏è Code Quality: Issues Found" ;;
          "failure") TITLE="üö® Code Quality: Critical Issues" ;;
          *) TITLE="üîç Code Quality: Check Complete" ;;
        esac
        
        # Create modern header with stats
        STATS_SUMMARY=""
        ERROR_COUNT=0
        WARNING_COUNT=0
        
        # Count issues for stats
        if [ -n "${{ steps.syntax-check.outputs.syntax_errors }}" ]; then
          ERROR_COUNT=$(expr $ERROR_COUNT + 1)
        fi
        if [ -n "${{ steps.template-check.outputs.template_errors }}" ]; then
          ERROR_COUNT=$(expr $ERROR_COUNT + 1)
        fi
        if [ -n "${{ steps.python-lint.outputs.lint_errors }}" ]; then
          ERROR_COUNT=$(expr $ERROR_COUNT + 1)
        fi
        if [ -n "${{ steps.config-check.outputs.config_errors }}" ]; then
          ERROR_COUNT=$(expr $ERROR_COUNT + 1)
        fi
        if [ -n "${{ steps.python-lint.outputs.lint_warnings }}" ]; then
          WARNING_COUNT=$(expr $WARNING_COUNT + 1)
        fi
        if [ -n "${{ steps.safety-check.outputs.safety_warnings }}" ]; then
          WARNING_COUNT=$(expr $WARNING_COUNT + 1)
        fi
        
        # Create stats bar
        if [ $ERROR_COUNT -eq 0 ] && [ $WARNING_COUNT -eq 0 ]; then
          STATS_SUMMARY="üéâ **Perfect Score!** All quality checks passed"
        else
          STATS_SUMMARY="üìä **Quality Report:** "
          if [ $ERROR_COUNT -gt 0 ]; then
            STATS_SUMMARY="${STATS_SUMMARY}${ERROR_COUNT} critical error(s) "
          fi
          if [ $WARNING_COUNT -gt 0 ]; then
            STATS_SUMMARY="${STATS_SUMMARY}${WARNING_COUNT} warning(s)"
          fi
        fi
        
        # Prepare detailed issues with modern formatting
        ISSUES_DETAILED=""
        
        # Syntax errors with enhanced presentation
        if [ -n "${{ steps.syntax-check.outputs.syntax_errors }}" ]; then
          ISSUES_DETAILED="${ISSUES_DETAILED}> **üî• Critical Syntax Errors**\n> These prevent the code from running and must be fixed immediately.\n\`\`\`python\n${{ steps.syntax-check.outputs.syntax_errors }}\n\`\`\`\n\n"
        fi
        
        # Template errors with context
        if [ -n "${{ steps.template-check.outputs.template_errors }}" ]; then
          ISSUES_DETAILED="${ISSUES_DETAILED}> **üîß Template & Control Flow Issues**\n> Problems with \`{{}}\` formatting or loop/function structure.\n\`\`\`python\n${{ steps.template-check.outputs.template_errors }}\n\`\`\`\n\n"
        fi
        
        # Linting errors
        if [ -n "${{ steps.python-lint.outputs.lint_errors }}" ]; then
          ISSUES_DETAILED="${ISSUES_DETAILED}> **‚ùå Code Quality Errors**\n> Structural issues that may cause runtime problems.\n\`\`\`python\n${{ steps.python-lint.outputs.lint_errors }}\n\`\`\`\n\n"
        fi
        
        # Config errors
        if [ -n "${{ steps.config-check.outputs.config_errors }}" ]; then
          ISSUES_DETAILED="${ISSUES_DETAILED}> **‚öôÔ∏è Configuration Issues**\n> Problems with TOML files or Makefile syntax.\n\`\`\`bash\n${{ steps.config-check.outputs.config_errors }}\n\`\`\`\n\n"
        fi
        
        # Warnings section
        WARNINGS_DETAILED=""
        
        if [ -n "${{ steps.python-lint.outputs.lint_warnings }}" ]; then
          WARNINGS_DETAILED="${WARNINGS_DETAILED}> **‚ö†Ô∏è Code Quality Warnings**\n> Non-critical issues worth reviewing.\n\`\`\`\n${{ steps.python-lint.outputs.lint_warnings }}\n\`\`\`\n\n"
        fi
        
        if [ -n "${{ steps.safety-check.outputs.safety_warnings }}" ]; then
          WARNINGS_DETAILED="${WARNINGS_DETAILED}> **üõ°Ô∏è Security Advisories**\n> Potential security vulnerabilities in dependencies.\n\`\`\`\n${{ steps.safety-check.outputs.safety_warnings }}\n\`\`\`\n\n"
        fi
        
        # Success message with modern styling
        if [ -z "$ISSUES_DETAILED" ] && [ -z "$WARNINGS_DETAILED" ]; then
          SUCCESS_MESSAGE="## üéØ Perfect Quality Score!\n\n**All systems green:** Your code passes all quality checks with flying colors.\n\n**‚úÖ Validated:**\n‚Ä¢ üêç Python syntax & structure\n‚Ä¢ üîß Template variables (\`{{}}\` formatting)\n‚Ä¢ üîÑ Control flow (loops, functions)\n‚Ä¢ üîç Code quality & style\n‚Ä¢ ‚öôÔ∏è Configuration files\n‚Ä¢ üõ°Ô∏è Security vulnerabilities\n\n*Ready for production deployment!*"
        fi
        
        # Build commit info with enhanced formatting
        COMMIT_SHORT="${{ github.sha }}"
        COMMIT_SHORT="${COMMIT_SHORT:0:7}"
        BRANCH_EMOJI="üåø"
        if [ "${{ github.ref_name }}" = "main" ]; then
          BRANCH_EMOJI="üöÄ"
        elif [ "${{ github.ref_name }}" = "develop" ]; then
          BRANCH_EMOJI="‚ö°"
        fi
        
        COMMIT_INFO="**${BRANCH_EMOJI} Branch:** \`${{ github.ref_name }}\`\n**üë§ Author:** ${{ github.actor }}\n**üîó Commit:** [\`${COMMIT_SHORT}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\n**‚ö° Trigger:** ${{ github.event_name }}"
        
        # Create main content
        if [ -n "$SUCCESS_MESSAGE" ]; then
          MAIN_CONTENT="$SUCCESS_MESSAGE"
        else
          MAIN_CONTENT="$STATS_SUMMARY\n\n$ISSUES_DETAILED$WARNINGS_DETAILED"
        fi
        
        # Create modern Discord payload with multiple embeds
        cat > /tmp/discord_payload.json << EOF
        {
          "username": "GitHub Code Quality Bot",
          "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
          "embeds": [
            {
              "title": "$TITLE",
              "description": "$COMMIT_INFO",
              "color": $COLOR,
              "fields": [
                {
                  "name": "üìÅ Changed Files ($FILES_COUNT)",
                  "value": "$FILES_LIST",
                  "inline": false
                },
                {
                  "name": "üîç Quality Analysis",
                  "value": "$MAIN_CONTENT",
                  "inline": false
                }
              ],
              "footer": {
                "text": "IPCrawler Code Quality System",
                "icon_url": "https://raw.githubusercontent.com/github/explore/main/topics/code-quality/code-quality.png"
              },
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "thumbnail": {
                "url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              }
            }
          ]
        }
        EOF
        
        # Send to Discord with error handling
        echo "üöÄ Sending modern Discord notification..."
        HTTP_STATUS=$(curl -w "%{http_code}" -s -o /tmp/discord_response.txt \
             -H "Content-Type: application/json" \
             -d @/tmp/discord_payload.json \
             "$DISCORD_WEBHOOK_URL")
        
        if [ "$HTTP_STATUS" = "204" ]; then
          echo "‚úÖ Discord notification sent successfully!"
        else
          echo "‚ùå Discord notification failed with HTTP $HTTP_STATUS"
          echo "Response: $(cat /tmp/discord_response.txt)"
        fi

    - name: Fail job if critical errors found
      if: steps.status.outputs.overall_status == 'failure'
      run: |
        echo "‚ùå Job failed due to critical code quality issues"
        exit 1