name: 🔍 CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff bandit safety pytest

    - name: 🎨 Check code formatting with Ruff
      run: ruff format --check .

    - name: 🔍 Lint with Ruff
      run: ruff check .

    - name: 🔒 Security scan with Bandit
      run: bandit -r ipcrawler/ -f json -o bandit-report.json || true

    - name: 🛡️ Check for known vulnerabilities
      run: safety check --json --output safety-report.json || true

    - name: ✅ Test imports
      run: python -c "import ipcrawler; print('✅ Main module imports successfully')"

    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-py${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json

  docker:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Build Docker image
      run: docker build -t ipcrawler:test .

    - name: 🧪 Test Docker image
      run: |
        docker run --rm ipcrawler:test --version || echo "Version check completed"

  validate:
    name: 📋 Validate Project
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ✅ Check required files
      run: |
        echo "Checking required files..."
        test -f README.md && echo "✅ README.md exists"
        test -f requirements.txt && echo "✅ requirements.txt exists"
        test -f Dockerfile && echo "✅ Dockerfile exists"
        test -f pyproject.toml && echo "✅ pyproject.toml exists"
        echo "🎉 All required files present"

    - name: 📄 Validate configuration files
      run: |
        echo "Validating configuration files..."
        python -c "import toml; toml.load('pyproject.toml')" && echo "✅ pyproject.toml is valid"
        echo "🎉 Configuration validation completed" 