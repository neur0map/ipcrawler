metadata:
  name: "Quick Gobuster Directory Scanner"
  description: "Fast directory enumeration using gobuster with smart wordlist selection"
  type: "servicescan"
  priority: 15
  version: "1.0"
  author: "IPCrawler Quick Test Template"
  tags:
    - quick
    - gobuster
    - directories
    - web

conditions:
  services:
    include: ["http", "https", "ssl/http", "http/", "https/", "http/insecure", "http/secure", "httpd", "http-proxy", "ssl/https", "https-alt", "http-alt"]
    exclude: ["^nacn_http$"]

options:
  - name: "wordlist"
    type: "string"
    default: "auto"
    help: "Wordlist to use ('auto' for intelligent selection, or path to custom wordlist)"
  - name: "threads"
    type: "integer"
    default: 10
    help: "Number of concurrent threads (default: 10 for quick scan)"
  - name: "timeout"
    type: "integer"
    default: 900
    help: "Maximum scan time in seconds (15 minutes for quick scan)"
  - name: "extensions"
    type: "string"
    default: "php,html,txt,js"
    help: "File extensions to check (comma-separated, no dots)"
  - name: "status_codes"
    type: "string"
    default: "200,301,302,403,401"
    help: "HTTP status codes to include in results"

execution:
  commands:
    - name: "wordlist_resolution"
      command: |
        echo "=== Quick Wordlist Resolution ===" &&
        wordlist_option="{wordlist}" &&
        resolved_wordlist="" &&
        if [ "$wordlist_option" = "auto" ]; then
          echo "üîç Auto-selecting compact wordlist for quick scan..." &&
          # Try SecLists paths in order of preference (smaller lists first for quick scan)
          for path in "/usr/share/seclists/Discovery/Web-Content/common.txt" "/usr/share/wordlists/dirb/common.txt" "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt" "/opt/seclists/Discovery/Web-Content/common.txt"; do
            if [ -f "$path" ]; then
              echo "‚úÖ Using wordlist: $path"
              resolved_wordlist="$path"
              break
            fi
          done &&
          # If no SecLists found, create minimal wordlist
          if [ -z "$resolved_wordlist" ]; then
            echo "‚ùå No SecLists found, creating minimal wordlist"
            temp_wordlist="/tmp/quick_wordlist_$$.txt"
            echo -e "admin\\nindex\\nhome\\ntest\\nlogin\\nwp-admin\\nrobots.txt\\nsitemap.xml\\n.git\\n.env\\nbackup\\nconfig\\napi\\nassets\\nimages\\ncss\\njs" > "$temp_wordlist"
            resolved_wordlist="$temp_wordlist"
          fi
        else
          echo "‚úÖ Using custom wordlist: $wordlist_option"
          if [ ! -f "$wordlist_option" ]; then
            echo "‚ùå Custom wordlist file does not exist: $wordlist_option"
            exit 1
          fi
          resolved_wordlist="$wordlist_option"
        fi &&
        echo "RESOLVED_WORDLIST=$resolved_wordlist"
      timeout: 30
      output_file: "{protocol}_{port}_{http_scheme}_wordlist_resolution.txt"
    
    - name: "gobuster_quick_scan"
      command: |
        echo "=== Gobuster Quick Directory Scan ===" &&
        wordlist_file="{scandir}/{protocol}_{port}_{http_scheme}_wordlist_resolution.txt" &&
        if [ ! -f "$wordlist_file" ]; then
          echo "‚ùå Wordlist resolution file not found: $wordlist_file"
          exit 1
        fi &&
        resolved_wordlist=$(grep "RESOLVED_WORDLIST=" "$wordlist_file" 2>/dev/null | cut -d'=' -f2-) &&
        if [ -z "$resolved_wordlist" ]; then
          echo "‚ùå No resolved wordlist available"
          exit 1
        fi &&
        echo "üöÄ Starting gobuster with wordlist: $resolved_wordlist" &&
        echo "üéØ Target: {http_scheme}://{address}:{port}/" &&
        echo "‚öôÔ∏è Threads: {threads}, Extensions: {extensions}, Timeout: {timeout}s" &&
        start_time=$(date +%s) &&
        timeout {timeout} gobuster dir \
          -u {http_scheme}://{address}:{port}/ \
          -t {threads} \
          -w "$resolved_wordlist" \
          -x "{extensions}" \
          -s "{status_codes}" \
          -k \
          -q \
          -o "{scandir}/{protocol}_{port}_{http_scheme}_gobuster_quick.txt" &&
        end_time=$(date +%s) &&
        duration=$((end_time - start_time)) &&
        echo "‚è±Ô∏è Quick scan completed in ${duration}s" &&
        results_count=$(wc -l < "{scandir}/{protocol}_{port}_{http_scheme}_gobuster_quick.txt" 2>/dev/null || echo "0") &&
        echo "üìä Found $results_count potential directories/files"
      timeout: 1000
      output_file: "{protocol}_{port}_{http_scheme}_gobuster_execution.txt"

output:
  patterns:
    - pattern: "/\\S+\\s+\\(Status: 200\\)"
      description: "Directory/File Found (200): {match1}"
      severity: "info"
      category: "directory_discovery"
    
    - pattern: "/\\S+\\s+\\(Status: 30[1-8]\\)"
      description: "Redirect Found (30x): {match1}"
      severity: "info"
      category: "redirect_discovery"
    
    - pattern: "/\\S+\\s+\\(Status: 403\\)"
      description: "Forbidden Access (403): {match1} - potential restricted resource"
      severity: "medium"
      category: "access_control"
    
    - pattern: "/\\S+\\s+\\(Status: 401\\)"
      description: "Authentication Required (401): {match1}"
      severity: "medium"
      category: "authentication"
    
    # Interesting file/directory patterns
    - pattern: "/(admin|administrator|manage|control|panel).*\\(Status: 200\\)"
      description: "Admin interface discovered"
      severity: "high"
      category: "admin_access"
    
    - pattern: "/(\\.git|\\.svn|\\.env|config|backup|bak).*\\(Status: 200\\)"
      description: "Sensitive file/directory discovered"
      severity: "high"
      category: "sensitive_files"
    
    - pattern: "/(api|rest|v1|v2|graphql).*\\(Status: 200\\)"
      description: "API endpoint discovered"
      severity: "medium"
      category: "api_discovery"
    
    - pattern: "/(wp-admin|wp-content|wp-includes).*\\(Status: 200\\)"
      description: "WordPress component discovered"
      severity: "info"
      category: "cms_detection"
    
    - pattern: "/(login|signin|auth|authentication).*\\(Status: 200\\)"
      description: "Login interface discovered"
      severity: "medium"
      category: "authentication"
    
    - pattern: "/(test|debug|dev|staging).*\\(Status: 200\\)"
      description: "Development/test resource discovered"
      severity: "medium"
      category: "development_files"
    
    # Performance and error indicators
    - pattern: "Quick scan completed in (\\d+)s"
      description: "Scan duration: {match1} seconds"
      severity: "info"
      category: "scan_performance"
    
    - pattern: "Found (\\d+) potential directories"
      description: "Discovery summary: {match1} items found"
      severity: "info"
      category: "scan_summary"
    
    - pattern: "‚ùå.*wordlist|‚ùå.*gobuster"
      description: "Scan error detected - check tool availability and wordlists"
      severity: "medium"
      category: "scan_errors"

  technology_detection:
    - pattern: "wp-.*\\(Status: 200\\)"
      technology: "WordPress"
    - pattern: "drupal.*\\(Status: 200\\)"
      technology: "Drupal"
    - pattern: "joomla.*\\(Status: 200\\)"
      technology: "Joomla"
    - pattern: "\\.php.*\\(Status: 200\\)"
      technology: "PHP"
    - pattern: "\\.asp.*\\(Status: 200\\)"
      technology: "ASP"
    - pattern: "\\.jsp.*\\(Status: 200\\)"
      technology: "JSP"

requirements:
  tools:
    - name: "gobuster"
      check_command: "gobuster version"
      install_hint: "apt-get install gobuster or go install github.com/OJ/gobuster/v3@latest"

debug:
  log_level: "info"
  trace_decisions: true
  show_command_output: false

variables:
  wordlist: "auto"
  threads: 10
  timeout: 900
  extensions: "php,html,txt,js"
  status_codes: "200,301,302,403,401"