<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="ipcrawler Network Reconnaissance Report - Professional penetration testing results">
    <meta name="keywords" content="penetration testing, network reconnaissance, security audit, vulnerability assessment">
    <meta name="author" content="ipcrawler">
    
    {% if auto_refresh %}
    <meta http-equiv="refresh" content="600">
    {% endif %}
    
    <title>üï∑Ô∏è ipcrawler - Network Reconnaissance Report</title>
    
    <!-- Preload critical resources -->
    <link rel="preload" href="data:font/woff2;charset=utf-8;base64," as="font" type="font/woff2" crossorigin>
    
    <!-- Enhanced favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üï∑Ô∏è</text></svg>">
    
    <style>
        {% include 'styles.css' %}
        
        /* Additional styles for enhanced UX */
        .search-highlight {
            background: rgba(245, 158, 11, 0.4);
            padding: 0.125rem 0.25rem;
            border-radius: 0.25rem;
            font-weight: 600;
        }
        
        .search-match-item {
            padding: 0.75rem;
            margin: 0.5rem 0;
            background: var(--bg-elevated);
            border-radius: var(--radius-md);
            border-left: 3px solid var(--primary-color);
            cursor: pointer;
            transition: var(--transition);
        }
        
        .search-match-item:hover {
            background: var(--bg-tertiary);
            transform: translateX(4px);
        }
        
        .light-theme {
            --bg-primary: #ffffff;
            --bg-secondary: #f8fafc;
            --bg-tertiary: #e2e8f0;
            --bg-card: #ffffff;
            --bg-elevated: #f1f5f9;
            
            --text-primary: #1e293b;
            --text-secondary: #475569;
            --text-tertiary: #64748b;
            --text-muted: #94a3b8;
            
            --border-color: #e2e8f0;
            --border-light: #cbd5e1;
        }
        
        .sort-asc::after {
            content: ' ‚Üë';
            color: var(--primary-color);
        }
        
        .sort-desc::after {
            content: ' ‚Üì';
            color: var(--primary-color);
        }
        
        /* Loading skeleton for dynamic content */
        .skeleton {
            background: linear-gradient(90deg, var(--bg-elevated) 25%, var(--bg-tertiary) 50%, var(--bg-elevated) 75%);
            background-size: 200% 100%;
            animation: shimmer 1.5s infinite;
        }
        
        /* Better print styles */
        @media print {
            .theme-toggle,
            .scroll-to-top,
            .search-container {
                display: none !important;
            }
            
            .section {
                break-inside: avoid;
                page-break-inside: avoid;
            }
            
            .collapsible {
                background: #f0f0f0 !important;
                color: #000 !important;
            }
            
            .content.active {
                border: none !important;
                box-shadow: none !important;
            }
        }
        
        /* Enhanced focus indicators for accessibility */
        .collapsible:focus-visible {
            outline: 3px solid var(--primary-color);
            outline-offset: 2px;
        }
        
        .search-input:focus-visible {
            outline: 3px solid var(--primary-color);
            outline-offset: 2px;
        }
        
        /* Enhanced table sorting indicators */
        .table th[data-sortable="true"] {
            position: relative;
            user-select: none;
        }
        
        .table th[data-sortable="true"]:hover {
            background: var(--bg-secondary);
        }
        
        /* Status badge improvements */
        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            text-transform: uppercase;
            letter-spacing: 0.025em;
        }
        
        .status-badge.live::before {
            content: '';
            width: 0.5rem;
            height: 0.5rem;
            background: var(--danger-color);
            border-radius: 50%;
            animation: pulse 2s infinite;
        }
        
        .status-badge.complete::before {
            content: '‚úì';
            color: var(--success-color);
            font-weight: bold;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
    </style>
</head>
<body>
    <!-- Skip navigation for accessibility -->
    <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary text-white p-2 rounded">Skip to main content</a>
    
    <div class="container" id="main-content">
        <!-- Partial report warning -->
        {% if is_partial %}
        {% include 'sections/partial_warning.html.j2' %}
        {% endif %}
        
        <!-- Header with enhanced status indicator -->
        {% include 'sections/header.html.j2' %}
        
        <!-- Progress indicator for live reports -->
        {% if is_live %}
        <div class="section" style="margin-bottom: 1rem;">
            <div class="status-badge live">
                Live Scan in Progress
            </div>
            <p style="margin-top: 0.5rem; color: var(--text-secondary); font-size: 0.875rem;">
                This report auto-refreshes every 10 minutes while scanning is active.
            </p>
        </div>
        {% else %}
        <div class="section" style="margin-bottom: 1rem;">
            <div class="status-badge complete">
                Scan Complete
            </div>
            <p style="margin-top: 0.5rem; color: var(--text-secondary); font-size: 0.875rem;">
                Report generated at {{ metadata.generated_time }}
            </p>
        </div>
        {% endif %}
        
        <!-- Executive Summary -->
        {% include 'sections/summary.html.j2' %}
        
        <!-- Quick Access Panel -->
        {% if quick_access %}
        {% include 'sections/quick_access.html.j2' %}
        {% endif %}
        
        <!-- Target Analysis Sections -->
        {% if targets %}
        <div class="section">
            <h2>
                <span>üéØ</span>
                Target Analysis
                <span class="badge badge-primary">{{ targets|length }} target{{ 's' if targets|length != 1 else '' }}</span>
            </h2>
            
            <!-- Navigation for multiple targets -->
            {% if targets|length > 1 %}
            <div style="margin-bottom: 2rem;">
                <h3 style="font-size: 1rem; color: var(--text-tertiary); margin-bottom: 0.75rem;">Quick Navigation:</h3>
                <div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
                    {% for target_name, target_data in targets.items() %}
                    <a href="#target-{{ loop.index }}" 
                       class="badge badge-primary" 
                       style="text-decoration: none; transition: var(--transition);"
                       onmouseover="this.style.transform='scale(1.05)'"
                       onmouseout="this.style.transform='scale(1)'">
                        {{ target_name }}
                    </a>
                    {% endfor %}
                </div>
            </div>
            {% endif %}
            
            <!-- Individual target sections -->
            {% for target_name, target_data in targets.items() %}
            <div id="target-{{ loop.index }}" class="target-section">
                {% with target_name=target_name, target_data=target_data %}
                {% include 'sections/target.html.j2' %}
                {% endwith %}
            </div>
            {% endfor %}
        </div>
        {% endif %}
        
        <!-- Footer -->
        {% include 'sections/footer.html.j2' %}
    </div>
    
    <!-- Enhanced JavaScript -->
    <script>
        {% include 'scripts.js' %}
        
        // Additional enhancements
        document.addEventListener('DOMContentLoaded', function() {
            // Add smooth fade-in animation
            const sections = document.querySelectorAll('.section');
            sections.forEach((section, index) => {
                section.style.opacity = '0';
                section.style.transform = 'translateY(20px)';
                section.style.transition = 'all 0.6s ease';
                
                setTimeout(() => {
                    section.style.opacity = '1';
                    section.style.transform = 'translateY(0)';
                }, index * 100);
            });
            
            // Add tooltips for abbreviations and technical terms
            const techTerms = {
                'TCP': 'Transmission Control Protocol',
                'UDP': 'User Datagram Protocol',
                'HTTP': 'Hypertext Transfer Protocol',
                'HTTPS': 'HTTP Secure',
                'SSL': 'Secure Sockets Layer',
                'TLS': 'Transport Layer Security',
                'SSH': 'Secure Shell',
                'FTP': 'File Transfer Protocol',
                'SMTP': 'Simple Mail Transfer Protocol',
                'DNS': 'Domain Name System',
                'CVE': 'Common Vulnerabilities and Exposures'
            };
            
            Object.keys(techTerms).forEach(term => {
                const regex = new RegExp(`\\b${term}\\b`, 'gi');
                const walker = document.createTreeWalker(
                    document.body,
                    NodeFilter.SHOW_TEXT,
                    {
                        acceptNode: function(node) {
                            if (node.parentNode.tagName === 'SCRIPT' || 
                                node.parentNode.tagName === 'STYLE' ||
                                node.parentNode.classList.contains('search-input')) {
                                return NodeFilter.FILTER_REJECT;
                            }
                            return NodeFilter.FILTER_ACCEPT;
                        }
                    },
                    false
                );
                
                const textNodes = [];
                let node;
                while (node = walker.nextNode()) {
                    if (regex.test(node.textContent)) {
                        textNodes.push(node);
                    }
                }
                
                textNodes.forEach(textNode => {
                    const text = textNode.textContent;
                    const newText = text.replace(regex, `<abbr title="${techTerms[term]}" style="cursor: help; text-decoration: underline dotted;">$&</abbr>`);
                    if (newText !== text) {
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = newText;
                        const parent = textNode.parentNode;
                        while (tempDiv.firstChild) {
                            parent.insertBefore(tempDiv.firstChild, textNode);
                        }
                        parent.removeChild(textNode);
                    }
                });
            });
            
            // Add copy functionality for code blocks and commands
            const codeBlocks = document.querySelectorAll('.code-block, .target-ip');
            codeBlocks.forEach(block => {
                const copyButton = document.createElement('button');
                copyButton.innerHTML = 'üìã';
                copyButton.setAttribute('aria-label', 'Copy to clipboard');
                copyButton.style.cssText = `
                    position: absolute;
                    top: 0.5rem;
                    right: 0.5rem;
                    background: var(--bg-tertiary);
                    border: 1px solid var(--border-color);
                    border-radius: var(--radius-sm);
                    width: 2rem;
                    height: 2rem;
                    cursor: pointer;
                    opacity: 0;
                    transition: var(--transition);
                    z-index: 10;
                `;
                
                const container = block.closest('.target-header') || block.parentElement;
                if (container) {
                    container.style.position = 'relative';
                    container.appendChild(copyButton);
                    
                    container.addEventListener('mouseenter', () => {
                        copyButton.style.opacity = '1';
                    });
                    
                    container.addEventListener('mouseleave', () => {
                        copyButton.style.opacity = '0';
                    });
                    
                    copyButton.addEventListener('click', async () => {
                        try {
                            await navigator.clipboard.writeText(block.textContent.trim());
                            copyButton.innerHTML = '‚úÖ';
                            setTimeout(() => {
                                copyButton.innerHTML = 'üìã';
                            }, 2000);
                        } catch (err) {
                            copyButton.innerHTML = '‚ùå';
                            setTimeout(() => {
                                copyButton.innerHTML = 'üìã';
                            }, 2000);
                        }
                    });
                }
            });
            
            // Add export functionality
            const exportButton = document.createElement('button');
            exportButton.innerHTML = 'üìÅ Export';
            exportButton.style.cssText = `
                position: fixed;
                top: 2rem;
                right: 8rem;
                padding: 0.75rem 1rem;
                background: var(--bg-elevated);
                color: var(--text-primary);
                border: 1px solid var(--border-color);
                border-radius: var(--radius-md);
                font-size: 0.875rem;
                font-weight: 600;
                cursor: pointer;
                transition: var(--transition);
                z-index: 1000;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            `;
            
            document.body.appendChild(exportButton);
            
            exportButton.addEventListener('click', () => {
                window.print();
            });
        });
    </script>
    
    <!-- Schema.org structured data for SEO -->
    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Report",
        "name": "ipcrawler Network Reconnaissance Report",
        "description": "Automated network reconnaissance and security assessment report",
        "dateCreated": "{{ metadata.generated_time }}",
        "author": {
            "@type": "SoftwareApplication",
            "name": "ipcrawler",
            "url": "https://github.com/neur0map/ipcrawler"
        },
        "about": {
            "@type": "SecurityAudit",
            "targetCount": {{ metadata.target_count }},
            "servicesDiscovered": {{ metadata.total_services }}
        }
    }
    </script>
</body>
</html>