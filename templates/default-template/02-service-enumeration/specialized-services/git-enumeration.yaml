metadata:
  name: "Advanced Git Security Enumeration"
  description: "Comprehensive Git security assessment covering repository exposure and credential disclosure"
  type: "servicescan"
  priority: 5
  version: "1.0"
  author: "IPCrawler YAML Plugin System"

conditions:
  services:
    include: ["^git", "^http", "^https", "^ssh", "git-daemon", "gitiles", "gitlab", "github", "gitea", "gogs"]
    exclude: ["^nacn_http$"]
  ports:
    include: [22, 80, 443, 3000, 8080, 8443, 9000, 9418]
  when:
    custom_condition: "force_git_scan or git_indicators_found"

options:
  - name: "force_git_scan"
    type: "boolean"
    default: false
    help: "Force Git enumeration on all HTTP/SSH services regardless of indicators"
  - name: "timeout"
    type: "integer"
    default: 900
    help: "Maximum time in seconds for Git enumeration (15 minutes)"
  - name: "check_common_repos"
    type: "boolean"
    default: true
    help: "Test common repository names and paths"

execution:
  commands:
    # Git daemon protocol enumeration (port 9418) - with timeout and error handling
    - name: "git_daemon_ls_remote"
      condition: "port == 9418"
      command: "timeout {git_timeout} git ls-remote git://{hostname}:9418/ 2>/dev/null || echo 'Git daemon not responsive'"
      timeout: 120
      output_file: "{protocol}_{port}_git-ls-remote.txt"
    
    # Common repository discovery for Git daemon - with better error handling
    - name: "git_daemon_common_repos"
      condition: "port == 9418 and check_common_repos"
      command: 'timeout {git_timeout} bash -c "for repo in repo main project app web dev staging prod backup admin config; do echo \"Testing $repo:\"; timeout 10 git ls-remote git://{hostname}:9418/$repo 2>/dev/null && echo \"Found: $repo\" || true; done"'
      timeout: 180
      output_file: "{protocol}_{port}_git-common-repos.txt"
    
    # HTTP .git directory exposure check
    - name: "http_git_head_check"
      condition: "service_name in ['http', 'https'] or port in [80, 443, 8080, 8443]"
      command: "curl -sSi --max-time {http_timeout} --connect-timeout 5 {http_scheme}://{hostname}:{port}/.git/HEAD"
      timeout: 60
      output_file: "{protocol}_{port}_{http_scheme}_git-head.txt"
    
    - name: "http_git_config_check"
      condition: "service_name in ['http', 'https'] or port in [80, 443, 8080, 8443]"
      command: "curl -sSi --max-time {http_timeout} --connect-timeout 5 {http_scheme}://{hostname}:{port}/.git/config"
      timeout: 30
      output_file: "{protocol}_{port}_{http_scheme}_git-config.txt"
    
    - name: "http_git_index_check"
      condition: "service_name in ['http', 'https'] or port in [80, 443, 8080, 8443]"
      command: "curl -sSi --max-time {http_timeout} --connect-timeout 5 {http_scheme}://{hostname}:{port}/.git/index"
      timeout: 30
      output_file: "{protocol}_{port}_{http_scheme}_git-index.txt"
    
    - name: "http_git_logs_check"
      condition: "service_name in ['http', 'https'] or port in [80, 443, 8080, 8443]"
      command: "curl -sSi --max-time {http_timeout} --connect-timeout 5 {http_scheme}://{hostname}:{port}/.git/logs/HEAD"
      timeout: 30
      output_file: "{protocol}_{port}_{http_scheme}_git-logs.txt"
    
    # Common Git file patterns
    - name: "http_gitignore_check"
      condition: "service_name in ['http', 'https'] or port in [80, 443, 8080, 8443]"
      command: "curl -sSi --max-time {http_timeout} --connect-timeout 5 {http_scheme}://{hostname}:{port}/.gitignore"
      timeout: 30
      output_file: "{protocol}_{port}_{http_scheme}_gitignore.txt"
    
    - name: "http_git_credentials_check"
      condition: "service_name in ['http', 'https'] or port in [80, 443, 8080, 8443]"
      command: "curl -sSi --max-time {http_timeout} --connect-timeout 5 {http_scheme}://{hostname}:{port}/.git-credentials"
      timeout: 30
      output_file: "{protocol}_{port}_{http_scheme}_git-credentials.txt"
    
    # Git subdirectory enumeration
    - name: "http_git_subdirs_check"
      condition: "service_name in ['http', 'https'] and check_common_repos"
      command: 'timeout 120 bash -c "for dir in git repo repository source src code project dev backup; do echo \"Testing $dir:\"; curl -sSi --max-time 5 {http_scheme}://{hostname}:{port}/$dir/.git/HEAD 2>/dev/null | head -2; done"'
      timeout: 180
      output_file: "{protocol}_{port}_{http_scheme}_git-subdirs.txt"
    
    # SSH Git enumeration
    - name: "ssh_git_version_check"
      condition: "service_name == 'ssh' or port == 22"
      command: "timeout {http_timeout} ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null git@{hostname} \"git --version\" 2>&1 || echo \"Git user not accessible\""
      timeout: 30
      output_file: "{protocol}_{port}_ssh-git-version.txt"
    
    - name: "ssh_git_users_check"
      condition: "service_name == 'ssh' or port == 22"
      command: 'timeout 60 bash -c "for user in git gitlab gitea gogs github repo admin; do echo \"Testing user $user:\"; timeout 5 ssh -o ConnectTimeout=3 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $user@{hostname} \"echo Git SSH test\" 2>&1; done"'
      timeout: 90
      output_file: "{protocol}_{port}_ssh-git-users.txt"
    
    # Git web interface enumeration
    - name: "git_web_interface_check"
      condition: "port in [3000, 8080, 8443, 9000] or service_name in ['gitea', 'gitlab', 'gogs']"
      command: "curl -sSiL --max-time 15 --connect-timeout 5 http://{hostname}:{port}/"
      timeout: 30
      output_file: "{protocol}_{port}_git-web-interface.txt"
    
    - name: "git_web_api_check"
      condition: "port in [3000, 8080, 8443, 9000] or service_name in ['gitea', 'gitlab', 'gogs']"
      command: 'timeout 30 bash -c "curl -sSi --max-time 5 http://{hostname}:{port}/api/v1/version 2>/dev/null && curl -sSi --max-time 5 http://{hostname}:{port}/api/v4/version 2>/dev/null"'
      timeout: 45
      output_file: "{protocol}_{port}_git-web-api.txt"
    
    # Generic Git service enumeration
    - name: "generic_git_banner"
      condition: "service_name == 'git' or 'git' in service_name"
      command: "timeout 10 nc -nv {address} {port} </dev/null 2>&1 || true"
      timeout: 30
      output_file: "{protocol}_{port}_git-banner.txt"

  manual_commands:
    # Git daemon manual commands
    - description: "(git-daemon) Clone default repository"
      command: "git clone git://{hostname}:9418/ git-repo-{address}"
      condition: "port == 9418"
    
    - description: "(git-daemon) Brute-force common repository names"
      command: 'timeout 60 bash -c "for repo in {repo,main,dev,prod,test,staging,backup,config,src,app,web,api,admin,private,internal,secrets}; do echo \"Testing $repo:\"; git ls-remote git://{hostname}:9418/$repo 2>/dev/null && echo \"Found: $repo\"; done"'
      condition: "port == 9418"
    
    # HTTP Git exploitation commands
    - description: "(http-git) Dump repository with git-dumper"
      command: "git-dumper {http_scheme}://{hostname}:{port}/.git/ git-dump-{hostname}/"
      condition: "service_name in ['http', 'https']"
    
    - description: "(http-git) Install and run git-dumper"
      command: "python3 -m pip install git-dumper && git-dumper {http_scheme}://{hostname}:{port}/.git/ git-dump-{hostname}/"
      condition: "service_name in ['http', 'https']"
    
    - description: "(http-git) Check for exposed HEAD file"
      command: "curl -s {http_scheme}://{hostname}:{port}/.git/HEAD && echo \"Git HEAD found - repository accessible!\""
      condition: "service_name in ['http', 'https']"
    
    - description: "(http-git) Extract remote configuration"
      command: "curl -s {http_scheme}://{hostname}:{port}/.git/config | grep -E \"(url|remote|user|email)\""
      condition: "service_name in ['http', 'https']"
    
    - description: "(http-git) Get latest commit hash"
      command: "curl -s {http_scheme}://{hostname}:{port}/.git/refs/heads/master 2>/dev/null || curl -s {http_scheme}://{hostname}:{port}/.git/refs/heads/main"
      condition: "service_name in ['http', 'https']"
    
    # SSH Git manual commands
    - description: "(ssh-git) Test Git access for user git"
      command: "ssh -o StrictHostKeyChecking=no git@{hostname} \"git --version\""
      condition: "service_name == 'ssh'"
    
    - description: "(ssh-git) Clone repository with SSH URL"
      command: "git clone git@{hostname}:repo.git ssh-git-repo-{hostname}"
      condition: "service_name == 'ssh'"
    
    # Git web interface commands
    - description: "(git-web) Get Gitea/Gogs version info"
      command: "curl -s http://{hostname}:{port}/api/v1/version | jq ."
      condition: "port in [3000, 9000] or service_name in ['gitea', 'gogs']"
    
    - description: "(git-web) Get GitLab version info"
      command: "curl -s http://{hostname}:{port}/api/v4/version | jq ."
      condition: "port in [8080, 8443] or service_name == 'gitlab'"
    
    # Secret analysis commands
    - description: "(secrets) Basic secret scan in dumped repository"
      command: "cd git-dump-{hostname}/ && grep -r -i \"password\\|secret\\|api_key\\|private_key\" . || true"
    
    - description: "(secrets) Advanced secret scanning with truffleHog"
      command: "cd git-dump-{hostname}/ && truffleHog --regex --entropy=False . || true"
    
    - description: "(secrets) Scan commit history for secrets"
      command: "cd git-dump-{hostname}/ && git log --all -p | grep -E \"(password|secret|key|token|credential)\" || true"

output:
  patterns:
    # Critical .git directory exposure
    - pattern: "(?i)\\.git/HEAD"
      description: "CRITICAL: Git repository HEAD file exposed - full source code disclosure"
      severity: "critical"
      category: "git_exposure"
    
    - pattern: "(?i)\\.git/config"
      description: "CRITICAL: Git config file exposed - may contain credentials/URLs/emails"
      severity: "critical"
      category: "git_exposure"
    
    - pattern: "(?i)\\.git/index"
      description: "CRITICAL: Git index file exposed - file structure and staging area disclosure"
      severity: "critical"
      category: "git_exposure"
    
    - pattern: "(?i)\\.git/logs/HEAD"
      description: "WARNING: Git commit logs exposed - development history and author info visible"
      severity: "high"
      category: "git_exposure"
    
    - pattern: "(?i)\\.git/refs/heads/"
      description: "WARNING: Git branch references exposed - reveals branch structure"
      severity: "high"
      category: "git_exposure"
    
    - pattern: "(?i)\\.git/objects/"
      description: "CRITICAL: Git objects directory exposed - complete repository reconstruction possible"
      severity: "critical"
      category: "git_exposure"
    
    # Git configuration and credential files
    - pattern: "(?i)\\.gitignore"
      description: "INFO: .gitignore file found - may reveal sensitive file patterns and project structure"
      severity: "info"
      category: "git_files"
    
    - pattern: "(?i)\\.gitmodules"
      description: "INFO: Git submodules configuration found - external repository dependencies"
      severity: "info"
      category: "git_files"
    
    - pattern: "(?i)\\.git-credentials"
      description: "CRITICAL: Git credentials file exposed - contains plaintext authentication data"
      severity: "critical"
      category: "credentials"
    
    - pattern: "(?i)\\.gitconfig"
      description: "WARNING: Git user configuration exposed - user identity and settings"
      severity: "medium"
      category: "git_files"
    
    # Git hosting platforms and remotes
    - pattern: "(?i)github\\.com|gitlab\\.com|bitbucket\\.org|gitea\\.io"
      description: "INFO: Git hosting platform URL detected"
      severity: "info"
      category: "git_remote"
    
    - pattern: "(?i)git@github\\.com|git@gitlab\\.com|git@bitbucket\\.org"
      description: "INFO: SSH Git URL detected"
      severity: "info"
      category: "git_remote"
    
    - pattern: "(?i)https://.*\\.git|http://.*\\.git"
      description: "WARNING: Git repository URL detected in HTTP traffic"
      severity: "medium"
      category: "git_remote"
    
    # Sensitive information in Git commits/content
    - pattern: "(?i)password[\"\\s]*[:=][\"\\s]*[^\\s\"]{3,}"
      description: "CRITICAL: Password detected in Git content"
      severity: "critical"
      category: "credentials"
    
    - pattern: "(?i)api[ _\\s]*key[\"\\s]*[:=][\"\\s]*[^\\s\"]{10,}"
      description: "CRITICAL: API key detected in Git content"
      severity: "critical"
      category: "credentials"
    
    - pattern: "(?i)secret[ _\\s]*key[\"\\s]*[:=][\"\\s]*[^\\s\"]{10,}"
      description: "CRITICAL: Secret key detected in Git content"
      severity: "critical"
      category: "credentials"
    
    - pattern: "(?i)access[ _\\s]*token[\"\\s]*[:=][\"\\s]*[^\\s\"]{10,}"
      description: "CRITICAL: Access token detected in Git content"
      severity: "critical"
      category: "credentials"
    
    - pattern: "(?i)private[ _\\s]*key|-----BEGIN.*PRIVATE.*KEY-----"
      description: "CRITICAL: Private key detected in Git content"
      severity: "critical"
      category: "credentials"
    
    - pattern: "(?i)aws[ _\\s]*access[ _\\s]*key|AKIA[0-9A-Z]{16}"
      description: "CRITICAL: AWS access key detected in Git content"
      severity: "critical"
      category: "credentials"
    
    - pattern: "(?i)database[ _\\s]*url|db[ _\\s]*connection"
      description: "WARNING: Database connection string detected in Git content"
      severity: "medium"
      category: "credentials"
    
    # Git web interfaces and tools
    - pattern: "(?i)gitweb|cgit|gitiles|gitlab|gitea|gogs"
      description: "INFO: Git web interface detected"
      severity: "info"
      category: "git_web"
    
    - pattern: "(?i)git-http-backend|git-receive-pack|git-upload-pack"
      description: "INFO: Git HTTP backend service detected"
      severity: "info"
      category: "git_service"
    
    - pattern: "(?i)GitLab.*version|Gitea.*version|Gogs.*version"
      description: "INFO: Git platform version information detected"
      severity: "info"
      category: "version"
    
    # Git-related error messages and debug info
    - pattern: "(?i)fatal:.*git|error:.*git|warning:.*git"
      description: "INFO: Git error message detected - may reveal repository structure"
      severity: "info"
      category: "git_error"
    
    - pattern: "(?i)not a git repository|No such file or directory.*\\.git"
      description: "INFO: Git repository check failed"
      severity: "info"
      category: "git_error"
    
    - pattern: "(?i)permission denied.*git|access denied.*git"
      description: "WARNING: Git access restriction detected"
      severity: "medium"
      category: "access_control"
    
    # Development/staging environment indicators
    - pattern: "(?i)dev\\.git|staging\\.git|test\\.git|demo\\.git"
      description: "WARNING: Development/staging Git repository detected"
      severity: "medium"
      category: "environment"
    
    - pattern: "(?i)backup\\.git|old\\.git|\\.git\\.bak|\\.git\\.old"
      description: "WARNING: Backup Git repository detected"
      severity: "medium"
      category: "backup"
    
    - pattern: "(?i)tmp\\.git|temp\\.git|cache\\.git"
      description: "WARNING: Temporary Git repository detected"
      severity: "medium"
      category: "temporary"
    
    # Git workflow and CI/CD indicators
    - pattern: "(?i)\\.github/workflows|\\.gitlab-ci\\.yml|jenkins.*git"
      description: "INFO: CI/CD Git integration detected"
      severity: "info"
      category: "cicd"
    
    - pattern: "(?i)git.*hook|pre-commit|post-commit|pre-push"
      description: "INFO: Git hooks detected - automated workflow scripts"
      severity: "info"
      category: "git_hooks"
    
    - pattern: "(?i)git.*lfs|\\.gitlfs|lfs\\.github\\.com"
      description: "INFO: Git Large File Storage detected"
      severity: "info"
      category: "git_lfs"
    
    # Git security and compliance patterns
    - pattern: "(?i)git.*signing|gpg.*git|signed.*commit"
      description: "INFO: Git commit signing detected - enhanced security"
      severity: "info"
      category: "security"
    
    - pattern: "(?i)git.*crypt|git.*secret|git.*vault"
      description: "INFO: Git encryption/secret management tool detected"
      severity: "info"
      category: "security"
    
    # HTTP status analysis for Git files
    - pattern: "(?i)HTTP/[12]\\.[01]\\s+200.*\\.git"
      description: "CRITICAL: Git file accessible via HTTP (200 OK)"
      severity: "critical"
      category: "http_status"
    
    - pattern: "(?i)HTTP/[12]\\.[01]\\s+403.*\\.git"
      description: "WARNING: Git file access forbidden but exists (403 Forbidden)"
      severity: "medium"
      category: "http_status"
    
    - pattern: "(?i)HTTP/[12]\\.[01]\\s+404.*\\.git"
      description: "INFO: Git file not found (404 Not Found)"
      severity: "info"
      category: "http_status"
    
    # Repository discovery patterns
    - pattern: "(?i)ref:\\s*refs/heads/([^\\s]+)"
      description: "INFO: Git branch detected: {match1}"
      severity: "info"
      category: "git_branch"
    
    - pattern: "(?i)\\[remote \"([^\"]+)\"\\]"
      description: "INFO: Git remote repository: {match1}"
      severity: "info"
      category: "git_remote"
    
    - pattern: "(?i)\\[user\\]\\s*name\\s*=\\s*([^\\n]+)"
      description: "INFO: Git user name: {match1}"
      severity: "info"
      category: "git_user"
    
    - pattern: "(?i)\\[user\\]\\s*email\\s*=\\s*([^\\n]+)"
      description: "INFO: Git user email: {match1}"
      severity: "info"
      category: "git_user"

  technology_detection:
    - pattern: "(?i)GitLab.*version[:\\s]*([\\d\\.]+)"
      technology: "GitLab"
      version_group: 1
    
    - pattern: "(?i)Gitea.*version[:\\s]*([\\d\\.]+)"
      technology: "Gitea"
      version_group: 1
    
    - pattern: "(?i)Gogs.*version[:\\s]*([\\d\\.]+)"
      technology: "Gogs"
      version_group: 1
    
    - pattern: "(?i)git.*version[:\\s]*([\\d\\.]+)"
      technology: "Git"
      version_group: 1

requirements:
  tools:
    - name: "git"
      check_command: "git --version"
      install_hint: "apt-get install git"
    - name: "curl"
      check_command: "curl --version"
      install_hint: "apt-get install curl"
    - name: "nc"
      check_command: "nc -h"
      install_hint: "apt-get install netcat-openbsd"

debug:
  log_level: "info"
  trace_decisions: true
  show_command_output: false