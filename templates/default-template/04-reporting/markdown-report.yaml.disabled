metadata:
  name: "Markdown Report Generator"
  description: "Generates comprehensive markdown reports from scan results"
  type: "reporting"
  priority: 90
  version: "1.0"
  author: "IPCrawler YAML Plugin System"

conditions:
  targets:
    run_once: true
    max_instances: 1
  when:
    output_format: ["markdown", "all"]

execution:
  commands:
    - name: "generate_markdown_report"
      command: "python3 -c \"
from ipcrawler.report_renderer import render_markdown_report
from ipcrawler.validator import load_and_validate_report
import os

# Generate markdown report for each target
for target_dir in os.listdir('results'):
    target_path = os.path.join('results', target_dir)
    if os.path.isdir(target_path):
        parsed_yaml = os.path.join(target_path, 'parsed.yaml')
        if os.path.exists(parsed_yaml):
            try:
                validated_report = load_and_validate_report(parsed_yaml, exit_on_failure=False)
                if validated_report:
                    render_markdown_report(validated_report)
                    print(f'Generated markdown report for {target_dir}')
            except Exception as e:
                print(f'Error generating report for {target_dir}: {e}')
\""
      timeout: 120

    - name: "generate_summary_report"
      command: "python3 -c \"
import os
from datetime import datetime

# Create summary report
summary_content = '# IPCrawler Scan Summary\\n\\n'
summary_content += f'Generated: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}\\n\\n'

target_count = 0
for target_dir in os.listdir('results'):
    target_path = os.path.join('results', target_dir)
    if os.path.isdir(target_path):
        target_count += 1
        report_file = os.path.join(target_path, 'report.md')
        if os.path.exists(report_file):
            summary_content += f'## {target_dir}\\n\\n'
            summary_content += f'- Report: [report.md](results/{target_dir}/report.md)\\n'
            summary_content += f'- Parsed Data: [parsed.yaml](results/{target_dir}/parsed.yaml)\\n\\n'

summary_content += f'\\nTotal targets scanned: {target_count}\\n'

with open('results/SCAN_SUMMARY.md', 'w') as f:
    f.write(summary_content)
    
print(f'Generated summary report for {target_count} targets')
\""
      timeout: 30

output:
  patterns:
    - pattern: "Generated markdown report for (.+)"
      description: "Successfully generated markdown report"
      category: "report_generation"
      severity: "info"
      
    - pattern: "Generated summary report for ([0-9]+) targets"
      description: "Summary report generation"
      category: "summary_report"
      severity: "info"
      
    - pattern: "Error generating report for (.+): (.+)"
      description: "Report generation error"
      category: "report_error"
      severity: "medium"

requirements:
  tools:
    - name: "python3"
      check_command: "python3 --version"
      install_hint: "Install Python 3: apt-get install python3"
  files:
    - path: "ipcrawler/report_renderer.py"
      description: "Report rendering module"
    - path: "ipcrawler/validator.py" 
      description: "Report validation module"